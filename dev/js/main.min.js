CLog = {
  todo: function(location, message) {
    if (this.dev) {
      console.log("[TODO] Location: " + location + " ==> Message: " + message + "");
    }
  },
  e: function(location, error) {
    console.log("[ERROR] Location: " + location + " ==> Error: ", error);
  },
  catch: function(location, error, printError) {
    printError = printError !== undefined ? printError : false;
    if (this.dev && (!this.hideCaught || printError)) {
      console.log("[ERROR CAUGHT] Location: " + location + " ==> Error: ", error);
    }
  },
  d: function(location, message) {
    if (this.dev) {
      console.log("[DEBUG] Location: " + location + " ==> Message: ", message);
    }
  },
  v: function(message1, message2) {
    if (message2 === undefined) {
      console.log("[VERBOSE]", message1);
    } else {
      console.log("[VERBOSE] " + message1, message2);
    }
  },
  n: function(number) {
    console.log("--------------------------- " + number + " ---------------------------");
  },
  caller: function() {
    console.log(arguments.callee.caller.arguments.callee.caller.toString());
  },
  dev: true,
  hideCaught: false
};

Array.prototype.remove = function() {
  var what, a = arguments,
    L = a.length,
    ax;
  while (L && this.length) {
    what = a[--L];
    while ((ax = this.indexOf(what)) !== -1) {
      this.splice(ax, 1);
    }
  }
  return this;
};

Array.prototype.sortNumbers = function() {
  this.sort(function sortNumber(a, b) {
    return a - b;
  });
  return this;
};

Array.prototype.contains = function(value) {
  return this.indexOf(value) > -1;
};

Date.prototype.getMonthName = function(lang) {
  lang = lang && (lang in Date.locale) ? lang : 'en';
  return Date.locale[lang].month_names[this.getMonth()];
};

Date.prototype.getMonthNameShort = function(lang) {
  lang = lang && (lang in Date.locale) ? lang : 'en';
  return Date.locale[lang].month_names_short[this.getMonth()];
};

Date.locale = {
  en: {
    month_names: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
    month_names_short: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
  }
};

Date.prototype.addDays = function(days) {
  var dat = new Date(this.valueOf());
  dat.setDate(dat.getDate() + days);
  return dat;
}

Date.prototype.fixUTCDateOffset = function() {
  var date = new Date(this.valueOf());
  date.setMinutes(date.getMinutes() + date.getTimezoneOffset());
  return date;
}

var $ = jQuery.noConflict();

$(document).ready(function() {
  NSMain.init();

  // Needed to include content.html file
  w3.includeHTML();

  NSMain.WindowLoad.webPartsLoaded(function() {
    NSMain.MiscFunctions.preparePlaceholders();
    NSMain.MiscFunctions.adjustShadows();
    NSMain.MiscFunctions.updateTitle(NSMain.Constants.pageTitle);
    NSMain.MiscFunctions.disableSPFormSubmits();
    NSItems.init();
  });
});

/**
 * @description Returns a deep clone of the passed object
 * @param  {Object} obj
 * @return {Object} 
 */
function clone(obj) {
  if (obj === null || typeof(obj) !== 'object' || 'isActiveClone' in obj)
    return obj;

  if (obj instanceof Date)
    var temp = new obj.constructor(); //or new Date(obj);
  else
    var temp = obj.constructor();

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      obj['isActiveClone'] = null;
      temp[key] = clone(obj[key]);
      delete obj['isActiveClone'];
    }
  }

  return temp;
}

// This is called after all the resources in the page are loaded and all the JS elements are initiated
$(window).on('load', function() {
  NSMain.Spinner.hide();
  NSMain.GrayOut.hideGrayOut();
  NSMain.Users.init();
  CLog.todo("Filter", "Add a date range filter option");
  CLog.todo("Search", "Add Author and Modified fields to search");
  CLog.todo("Search", "Add search instructions");
  CLog.todo("New Feature", "Might want to add a delete function for items, maybe via a right click context menu");
});

String.prototype.hashCode = function() {
  var hash = 0,
    i, chr, len;
  if (this.length === 0) return hash;
  for (i = 0, len = this.length; i < len; i++) {
    chr = this.charCodeAt(i);
    hash = ((hash << 5) - hash) + chr;
    hash |= 0; // Convert to 32bit integer
  }
  return hash;
};

/**
 * @description Example string provided: "newTestString"; returned string: "new-test-string"
 *              Reference: https://stackoverflow.com/a/34323600/1004334
 */
String.prototype.toLowerCaseWithDashes = function() {
  var string = this;
  string = string.replace(/([a-z])([A-Z])/g, '$1-$2');
  string = string.replace(/([A-Z])([A-Z][a-z])/g, '$1-$2')
  return string.toLowerCase();
};

/**
 * @description Example string provided: "new-test-string"; returned string: "NewTestString"
 */
String.prototype.removeDashesAndCapitalize = function() {
  var frags = this.split('-');
  for (i = 0; i < frags.length; i++) {
    frags[i] = frags[i].charAt(0).toUpperCase() + frags[i].slice(1);
  }
  return frags.join('');
};

/**
 * @description Separates the camel case string with spaces. Example string provided: "StorageAssetID"; returned string: "Storage Asset ID"
 */
String.prototype.toSentenceCaseWithSpaces = function() {
  var string = this;
  string = string.replace(/([a-z])([A-Z])/g, '$1 $2');
  string = string.replace(/([A-Z])([A-Z][a-z])/g, '$1 $2')
  return string;
};

String.prototype.contains = function(value) {
  return this.toLowerCase().indexOf(value) >= 0;
};

!function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof exports?e(require("jquery")):e(jQuery)}(function(m){"use strict";var a;m.support.htmlMenuitem="HTMLMenuItemElement"in window,m.support.htmlCommand="HTMLCommandElement"in window,m.support.eventSelectstart="onselectstart"in document.documentElement,m.ui&&m.widget||(m.cleanData=(a=m.cleanData,function(e){var t,n,o;for(o=0;null!=e[o];o++){n=e[o];try{(t=m._data(n,"events"))&&t.remove&&m(n).triggerHandler("remove")}catch(e){}}a(e)}));var c=null,d=!1,p=m(window),f=0,h={},x={},v={},g={selector:null,appendTo:null,trigger:"right",autoHide:!1,delay:200,reposition:!0,hideOnSecondTrigger:!1,selectableSubMenu:!1,classNames:{hover:"context-menu-hover",disabled:"context-menu-disabled",visible:"context-menu-visible",notSelectable:"context-menu-not-selectable",icon:"context-menu-icon",iconEdit:"context-menu-icon-edit",iconCut:"context-menu-icon-cut",iconCopy:"context-menu-icon-copy",iconPaste:"context-menu-icon-paste",iconDelete:"context-menu-icon-delete",iconAdd:"context-menu-icon-add",iconQuit:"context-menu-icon-quit",iconLoadingClass:"context-menu-icon-loading"},determinePosition:function(e){if(m.ui&&m.ui.position)e.css("display","block").position({my:"center top",at:"center bottom",of:this,offset:"0 5",collision:"fit"}).css("display","none");else{var t=this.offset();t.top+=this.outerHeight(),t.left+=this.outerWidth()/2-e.outerWidth()/2,e.css(t)}},position:function(e,t,n){var o;if(t||n){if("maintain"===t&&"maintain"===n)o=e.$menu.position();else{var a=e.$menu.offsetParent().offset();o={top:n-a.top,left:t-a.left}}var s=p.scrollTop()+p.height(),i=p.scrollLeft()+p.width(),c=e.$menu.outerHeight(),l=e.$menu.outerWidth();o.top+c>s&&(o.top-=c),o.top<0&&(o.top=0),o.left+l>i&&(o.left-=l),o.left<0&&(o.left=0),e.$menu.css(o)}else e.determinePosition.call(this,e.$menu)},positionSubmenu:function(e){if(void 0!==e)if(m.ui&&m.ui.position)e.css("display","block").position({my:"left top-5",at:"right top",of:this,collision:"flipfit fit"}).css("display","");else{var t={top:-9,left:this.outerWidth()-5};e.css(t)}},zIndex:1,animation:{duration:50,show:"slideDown",hide:"slideUp"},events:{show:m.noop,hide:m.noop,activated:m.noop},callback:null,items:{}},s={timer:null,pageX:null,pageY:null},b={abortevent:function(e){e.preventDefault(),e.stopImmediatePropagation()},contextmenu:function(e){var t=m(this);if("right"===e.data.trigger&&(e.preventDefault(),e.stopImmediatePropagation()),!("right"!==e.data.trigger&&"demand"!==e.data.trigger&&e.originalEvent||!(void 0===e.mouseButton||!e.data||"left"===e.data.trigger&&0===e.mouseButton||"right"===e.data.trigger&&2===e.mouseButton)||t.hasClass("context-menu-active")||t.hasClass("context-menu-disabled"))){if(c=t,e.data.build){var n=e.data.build(c,e);if(!1===n)return;if(e.data=m.extend(!0,{},g,e.data,n||{}),!e.data.items||m.isEmptyObject(e.data.items))throw window.console&&(console.error||console.log).call(console,"No items specified to show in contextMenu"),new Error("No Items specified");e.data.$trigger=c,$.create(e.data)}$.show.call(t,e.data,e.pageX,e.pageY)}},click:function(e){e.preventDefault(),e.stopImmediatePropagation(),m(this).trigger(m.Event("contextmenu",{data:e.data,pageX:e.pageX,pageY:e.pageY}))},mousedown:function(e){var t=m(this);c&&c.length&&!c.is(t)&&c.data("contextMenu").$menu.trigger("contextmenu:hide"),2===e.button&&(c=t.data("contextMenuActive",!0))},mouseup:function(e){var t=m(this);t.data("contextMenuActive")&&c&&c.length&&c.is(t)&&!t.hasClass("context-menu-disabled")&&(e.preventDefault(),e.stopImmediatePropagation(),(c=t).trigger(m.Event("contextmenu",{data:e.data,pageX:e.pageX,pageY:e.pageY}))),t.removeData("contextMenuActive")},mouseenter:function(e){var t=m(this),n=m(e.relatedTarget),o=m(document);n.is(".context-menu-list")||n.closest(".context-menu-list").length||c&&c.length||(s.pageX=e.pageX,s.pageY=e.pageY,s.data=e.data,o.on("mousemove.contextMenuShow",b.mousemove),s.timer=setTimeout(function(){s.timer=null,o.off("mousemove.contextMenuShow"),(c=t).trigger(m.Event("contextmenu",{data:s.data,pageX:s.pageX,pageY:s.pageY}))},e.data.delay))},mousemove:function(e){s.pageX=e.pageX,s.pageY=e.pageY},mouseleave:function(e){var t=m(e.relatedTarget);if(!t.is(".context-menu-list")&&!t.closest(".context-menu-list").length){try{clearTimeout(s.timer)}catch(e){}s.timer=null}},layerClick:function(a){var s,i,c=m(this).data("contextMenuRoot"),l=a.button,r=a.pageX,u=a.pageY,d=void 0===r;a.preventDefault(),setTimeout(function(){if(d)null!=c&&null!==c.$menu&&void 0!==c.$menu&&c.$menu.trigger("contextmenu:hide");else{var e,t="left"===c.trigger&&0===l||"right"===c.trigger&&2===l;if(document.elementFromPoint&&c.$layer){if(c.$layer.hide(),(s=document.elementFromPoint(r-p.scrollLeft(),u-p.scrollTop())).isContentEditable){var n=document.createRange(),o=window.getSelection();n.selectNode(s),n.collapse(!0),o.removeAllRanges(),o.addRange(n)}m(s).trigger(a),c.$layer.show()}if(c.hideOnSecondTrigger&&t&&null!==c.$menu&&void 0!==c.$menu)c.$menu.trigger("contextmenu:hide");else{if(c.reposition&&t)if(document.elementFromPoint){if(c.$trigger.is(s))return void c.position.call(c.$trigger,c,r,u)}else if(i=c.$trigger.offset(),e=m(window),i.top+=e.scrollTop(),i.top<=a.pageY&&(i.left+=e.scrollLeft(),i.left<=a.pageX&&(i.bottom=i.top+c.$trigger.outerHeight(),i.bottom>=a.pageY&&(i.right=i.left+c.$trigger.outerWidth(),i.right>=a.pageX))))return void c.position.call(c.$trigger,c,r,u);s&&t&&c.$trigger.one("contextmenu:hidden",function(){m(s).contextMenu({x:r,y:u,button:l})}),null!=c&&null!==c.$menu&&void 0!==c.$menu&&c.$menu.trigger("contextmenu:hide")}}},50)},keyStop:function(e,t){t.isInput||e.preventDefault(),e.stopPropagation()},key:function(e){var t={};c&&(t=c.data("contextMenu")||{}),void 0===t.zIndex&&(t.zIndex=0);var n=0,o=function(e){""!==e.style.zIndex?n=e.style.zIndex:null!==e.offsetParent&&void 0!==e.offsetParent?o(e.offsetParent):null!==e.parentElement&&void 0!==e.parentElement&&o(e.parentElement)};if(o(e.target),!(t.$menu&&parseInt(n,10)>parseInt(t.$menu.css("zIndex"),10))){switch(e.keyCode){case 9:case 38:if(b.keyStop(e,t),t.isInput){if(9===e.keyCode&&e.shiftKey)return e.preventDefault(),t.$selected&&t.$selected.find("input, textarea, select").blur(),void(null!==t.$menu&&void 0!==t.$menu&&t.$menu.trigger("prevcommand"));if(38===e.keyCode&&"checkbox"===t.$selected.find("input, textarea, select").prop("type"))return void e.preventDefault()}else if(9!==e.keyCode||e.shiftKey)return void(null!==t.$menu&&void 0!==t.$menu&&t.$menu.trigger("prevcommand"));break;case 40:if(b.keyStop(e,t),!t.isInput)return void(null!==t.$menu&&void 0!==t.$menu&&t.$menu.trigger("nextcommand"));if(9===e.keyCode)return e.preventDefault(),t.$selected&&t.$selected.find("input, textarea, select").blur(),void(null!==t.$menu&&void 0!==t.$menu&&t.$menu.trigger("nextcommand"));if(40===e.keyCode&&"checkbox"===t.$selected.find("input, textarea, select").prop("type"))return void e.preventDefault();break;case 37:if(b.keyStop(e,t),t.isInput||!t.$selected||!t.$selected.length)break;if(!t.$selected.parent().hasClass("context-menu-root")){var a=t.$selected.parent().parent();return t.$selected.trigger("contextmenu:blur"),void(t.$selected=a)}break;case 39:if(b.keyStop(e,t),t.isInput||!t.$selected||!t.$selected.length)break;var s=t.$selected.data("contextMenu")||{};if(s.$menu&&t.$selected.hasClass("context-menu-submenu"))return t.$selected=null,s.$selected=null,void s.$menu.trigger("nextcommand");break;case 35:case 36:return t.$selected&&t.$selected.find("input, textarea, select").length?void 0:((t.$selected&&t.$selected.parent()||t.$menu).children(":not(."+t.classNames.disabled+", ."+t.classNames.notSelectable+")")[36===e.keyCode?"first":"last"]().trigger("contextmenu:focus"),void e.preventDefault());case 13:if(b.keyStop(e,t),t.isInput){if(t.$selected&&!t.$selected.is("textarea, select"))return void e.preventDefault();break}return void(void 0!==t.$selected&&null!==t.$selected&&t.$selected.trigger("mouseup"));case 32:case 33:case 34:return void b.keyStop(e,t);case 27:return b.keyStop(e,t),void(null!==t.$menu&&void 0!==t.$menu&&t.$menu.trigger("contextmenu:hide"));default:var i=String.fromCharCode(e.keyCode).toUpperCase();if(t.accesskeys&&t.accesskeys[i])return void t.accesskeys[i].$node.trigger(t.accesskeys[i].$menu?"contextmenu:focus":"mouseup")}e.stopPropagation(),void 0!==t.$selected&&null!==t.$selected&&t.$selected.trigger(e)}},prevItem:function(e){e.stopPropagation();var t=m(this).data("contextMenu")||{},n=m(this).data("contextMenuRoot")||{};if(t.$selected){var o=t.$selected;(t=t.$selected.parent().data("contextMenu")||{}).$selected=o}for(var a=t.$menu.children(),s=t.$selected&&t.$selected.prev().length?t.$selected.prev():a.last(),i=s;s.hasClass(n.classNames.disabled)||s.hasClass(n.classNames.notSelectable)||s.is(":hidden");)if((s=s.prev().length?s.prev():a.last()).is(i))return;t.$selected&&b.itemMouseleave.call(t.$selected.get(0),e),b.itemMouseenter.call(s.get(0),e);var c=s.find("input, textarea, select");c.length&&c.focus()},nextItem:function(e){e.stopPropagation();var t=m(this).data("contextMenu")||{},n=m(this).data("contextMenuRoot")||{};if(t.$selected){var o=t.$selected;(t=t.$selected.parent().data("contextMenu")||{}).$selected=o}for(var a=t.$menu.children(),s=t.$selected&&t.$selected.next().length?t.$selected.next():a.first(),i=s;s.hasClass(n.classNames.disabled)||s.hasClass(n.classNames.notSelectable)||s.is(":hidden");)if((s=s.next().length?s.next():a.first()).is(i))return;t.$selected&&b.itemMouseleave.call(t.$selected.get(0),e),b.itemMouseenter.call(s.get(0),e);var c=s.find("input, textarea, select");c.length&&c.focus()},focusInput:function(){var e=m(this).closest(".context-menu-item"),t=e.data(),n=t.contextMenu,o=t.contextMenuRoot;o.$selected=n.$selected=e,o.isInput=n.isInput=!0},blurInput:function(){var e=m(this).closest(".context-menu-item").data(),t=e.contextMenu;e.contextMenuRoot.isInput=t.isInput=!1},menuMouseenter:function(){m(this).data().contextMenuRoot.hovering=!0},menuMouseleave:function(e){var t=m(this).data().contextMenuRoot;t.$layer&&t.$layer.is(e.relatedTarget)&&(t.hovering=!1)},itemMouseenter:function(e){var t=m(this),n=t.data(),o=n.contextMenu,a=n.contextMenuRoot;a.hovering=!0,e&&a.$layer&&a.$layer.is(e.relatedTarget)&&(e.preventDefault(),e.stopImmediatePropagation()),(o.$menu?o:a).$menu.children("."+a.classNames.hover).trigger("contextmenu:blur").children(".hover").trigger("contextmenu:blur"),t.hasClass(a.classNames.disabled)||t.hasClass(a.classNames.notSelectable)?o.$selected=null:t.trigger("contextmenu:focus")},itemMouseleave:function(e){var t=m(this),n=t.data(),o=n.contextMenu,a=n.contextMenuRoot;if(a!==o&&a.$layer&&a.$layer.is(e.relatedTarget))return void 0!==a.$selected&&null!==a.$selected&&a.$selected.trigger("contextmenu:blur"),e.preventDefault(),e.stopImmediatePropagation(),void(a.$selected=o.$selected=o.$node);o&&o.$menu&&o.$menu.hasClass("context-menu-visible")||t.trigger("contextmenu:blur")},itemClick:function(e){var t,n=m(this),o=n.data(),a=o.contextMenu,s=o.contextMenuRoot,i=o.contextMenuKey;if(!(!a.items[i]||n.is("."+s.classNames.disabled+", .context-menu-separator, ."+s.classNames.notSelectable)||n.is(".context-menu-submenu")&&!1===s.selectableSubMenu)){if(e.preventDefault(),e.stopImmediatePropagation(),m.isFunction(a.callbacks[i])&&Object.prototype.hasOwnProperty.call(a.callbacks,i))t=a.callbacks[i];else{if(!m.isFunction(s.callback))return;t=s.callback}!1!==t.call(s.$trigger,i,s,e)?s.$menu.trigger("contextmenu:hide"):s.$menu.parent().length&&$.update.call(s.$trigger,s)}},inputClick:function(e){e.stopImmediatePropagation()},hideMenu:function(e,t){var n=m(this).data("contextMenuRoot");$.hide.call(n.$trigger,n,t&&t.force)},focusItem:function(e){e.stopPropagation();var t=m(this),n=t.data(),o=n.contextMenu,a=n.contextMenuRoot;t.hasClass(a.classNames.disabled)||t.hasClass(a.classNames.notSelectable)||(t.addClass([a.classNames.hover,a.classNames.visible].join(" ")).parent().find(".context-menu-item").not(t).removeClass(a.classNames.visible).filter("."+a.classNames.hover).trigger("contextmenu:blur"),o.$selected=a.$selected=t,o&&o.$node&&o.$node.hasClass("context-menu-submenu")&&o.$node.addClass(a.classNames.hover),o.$node&&a.positionSubmenu.call(o.$node,o.$menu))},blurItem:function(e){e.stopPropagation();var t=m(this),n=t.data(),o=n.contextMenu,a=n.contextMenuRoot;o.autoHide&&t.removeClass(a.classNames.visible),t.removeClass(a.classNames.hover),o.$selected=null}},$={show:function(n,e,t){var o=m(this),a={};if(m("#context-menu-layer").trigger("mousedown"),n.$trigger=o,!1!==n.events.show.call(o,n))if(!1!==$.update.call(o,n)){if(n.position.call(o,n,e,t),n.zIndex){var s=n.zIndex;"function"==typeof n.zIndex&&(s=n.zIndex.call(o,n)),a.zIndex=function(e){for(var t=0,n=e;t=Math.max(t,parseInt(n.css("z-index"),10)||0),(n=n.parent())&&n.length&&!(-1<"html body".indexOf(n.prop("nodeName").toLowerCase())););return t}(o)+s}$.layer.call(n.$menu,n,a.zIndex),n.$menu.find("ul").css("zIndex",a.zIndex+1),n.$menu.css(a)[n.animation.show](n.animation.duration,function(){o.trigger("contextmenu:visible"),$.activated(n),n.events.activated(n)}),o.data("contextMenu",n).addClass("context-menu-active"),m(document).off("keydown.contextMenu").on("keydown.contextMenu",b.key),n.autoHide&&m(document).on("mousemove.contextMenuAutoHide",function(e){var t=o.offset();t.right=t.left+o.outerWidth(),t.bottom=t.top+o.outerHeight(),!n.$layer||n.hovering||e.pageX>=t.left&&e.pageX<=t.right&&e.pageY>=t.top&&e.pageY<=t.bottom||setTimeout(function(){n.hovering||null===n.$menu||void 0===n.$menu||n.$menu.trigger("contextmenu:hide")},50)})}else c=null;else c=null},hide:function(t,e){var n=m(this);if(t||(t=n.data("contextMenu")||{}),e||!t.events||!1!==t.events.hide.call(n,t)){if(n.removeData("contextMenu").removeClass("context-menu-active"),t.$layer){setTimeout((o=t.$layer,function(){o.remove()}),10);try{delete t.$layer}catch(e){t.$layer=null}}var o;c=null,t.$menu.find("."+t.classNames.hover).trigger("contextmenu:blur"),t.$selected=null,t.$menu.find("."+t.classNames.visible).removeClass(t.classNames.visible),m(document).off(".contextMenuAutoHide").off("keydown.contextMenu"),t.$menu&&t.$menu[t.animation.hide](t.animation.duration,function(){t.build&&(t.$menu.remove(),m.each(t,function(e){switch(e){case"ns":case"selector":case"build":case"trigger":return!0;default:t[e]=void 0;try{delete t[e]}catch(e){}return!0}})),setTimeout(function(){n.trigger("contextmenu:hidden")},10)})}},create:function(r,u){function d(e){var t=m("<span></span>");if(e._accesskey)e._beforeAccesskey&&t.append(document.createTextNode(e._beforeAccesskey)),m("<span></span>").addClass("context-menu-accesskey").text(e._accesskey).appendTo(t),e._afterAccesskey&&t.append(document.createTextNode(e._afterAccesskey));else if(e.isHtmlName){if(void 0!==e.accesskey)throw new Error("accesskeys are not compatible with HTML names and cannot be used together in the same item");t.html(e.name)}else t.text(e.name);return t}void 0===u&&(u=r),r.$menu=m('<ul class="context-menu-list"></ul>').addClass(r.className||"").data({contextMenu:r,contextMenuRoot:u}),m.each(["callbacks","commands","inputs"],function(e,t){r[t]={},u[t]||(u[t]={})}),u.accesskeys||(u.accesskeys={}),m.each(r.items,function(n,o){var e=m('<li class="context-menu-item"></li>').addClass(o.className||""),t=null,a=null;if(e.on("click",m.noop),"string"!=typeof o&&"cm_separator"!==o.type||(o={type:"cm_seperator"}),o.$node=e.data({contextMenu:r,contextMenuRoot:u,contextMenuKey:n}),void 0!==o.accesskey)for(var s,i=function(e){for(var t,n=e.split(/\s+/),o=[],a=0;t=n[a];a++)t=t.charAt(0).toUpperCase(),o.push(t);return o}(o.accesskey),c=0;s=i[c];c++)if(!u.accesskeys[s]){var l=(u.accesskeys[s]=o).name.match(new RegExp("^(.*?)("+s+")(.*)$","i"));l&&(o._beforeAccesskey=l[1],o._accesskey=l[2],o._afterAccesskey=l[3]);break}if(o.type&&v[o.type])v[o.type].call(e,o,r,u),m.each([r,u],function(e,t){t.commands[n]=o,!m.isFunction(o.callback)||void 0!==t.callbacks[n]&&void 0!==r.type||(t.callbacks[n]=o.callback)});else{switch("cm_seperator"===o.type?e.addClass("context-menu-separator "+u.classNames.notSelectable):"html"===o.type?e.addClass("context-menu-html "+u.classNames.notSelectable):"sub"===o.type||(o.type?(t=m("<label></label>").appendTo(e),d(o).appendTo(t),e.addClass("context-menu-input"),r.hasTypes=!0,m.each([r,u],function(e,t){t.commands[n]=o,t.inputs[n]=o})):o.items&&(o.type="sub")),o.type){case"cm_seperator":break;case"text":a=m('<input type="text" value="1" name="" />').attr("name","context-menu-input-"+n).val(o.value||"").appendTo(t);break;case"textarea":a=m('<textarea name=""></textarea>').attr("name","context-menu-input-"+n).val(o.value||"").appendTo(t),o.height&&a.height(o.height);break;case"checkbox":a=m('<input type="checkbox" value="1" name="" />').attr("name","context-menu-input-"+n).val(o.value||"").prop("checked",!!o.selected).prependTo(t);break;case"radio":a=m('<input type="radio" value="1" name="" />').attr("name","context-menu-input-"+o.radio).val(o.value||"").prop("checked",!!o.selected).prependTo(t);break;case"select":a=m('<select name=""></select>').attr("name","context-menu-input-"+n).appendTo(t),o.options&&(m.each(o.options,function(e,t){m("<option></option>").val(e).text(t).appendTo(a)}),a.val(o.selected));break;case"sub":d(o).appendTo(e),o.appendTo=o.$node,e.data("contextMenu",o).addClass("context-menu-submenu"),o.callback=null,"function"==typeof o.items.then?$.processPromises(o,u,o.items):$.create(o,u);break;case"html":m(o.html).appendTo(e);break;default:m.each([r,u],function(e,t){t.commands[n]=o,!m.isFunction(o.callback)||void 0!==t.callbacks[n]&&void 0!==r.type||(t.callbacks[n]=o.callback)}),d(o).appendTo(e)}o.type&&"sub"!==o.type&&"html"!==o.type&&"cm_seperator"!==o.type&&(a.on("focus",b.focusInput).on("blur",b.blurInput),o.events&&a.on(o.events,r)),o.icon&&(m.isFunction(o.icon)?o._icon=o.icon.call(this,this,e,n,o):"string"==typeof o.icon&&"fa-"===o.icon.substring(0,3)?o._icon=u.classNames.icon+" "+u.classNames.icon+"--fa fa "+o.icon:o._icon=u.classNames.icon+" "+u.classNames.icon+"-"+o.icon,e.addClass(o._icon))}o.$input=a,o.$label=t,e.appendTo(r.$menu),!r.hasTypes&&m.support.eventSelectstart&&e.on("selectstart.disableTextSelect",b.abortevent)}),r.$node||r.$menu.css("display","none").addClass("context-menu-root"),r.$menu.appendTo(r.appendTo||document.body)},resize:function(e,t){var n;e.css({position:"absolute",display:"block"}),e.data("width",(n=e.get(0)).getBoundingClientRect?Math.ceil(n.getBoundingClientRect().width):e.outerWidth()+1),e.css({position:"static",minWidth:"0px",maxWidth:"100000px"}),e.find("> li > ul").each(function(){$.resize(m(this),!0)}),t||e.find("ul").addBack().css({position:"",display:"",minWidth:"",maxWidth:""}).outerWidth(function(){return m(this).data("width")})},update:function(s,i){var c=this;void 0===i&&(i=s,$.resize(s.$menu));var l=!1;return s.$menu.children().each(function(){var e,t=m(this),n=t.data("contextMenuKey"),o=s.items[n],a=m.isFunction(o.disabled)&&o.disabled.call(c,n,i)||!0===o.disabled;if((e=m.isFunction(o.visible)?o.visible.call(c,n,i):void 0===o.visible||!0===o.visible)&&(l=!0),t[e?"show":"hide"](),t[a?"addClass":"removeClass"](i.classNames.disabled),m.isFunction(o.icon)&&(t.removeClass(o._icon),o._icon=o.icon.call(this,c,t,n,o),t.addClass(o._icon)),o.type)switch(t.find("input, select, textarea").prop("disabled",a),o.type){case"text":case"textarea":o.$input.val(o.value||"");break;case"checkbox":case"radio":o.$input.val(o.value||"").prop("checked",!!o.selected);break;case"select":o.$input.val((0===o.selected?"0":o.selected)||"")}o.$menu&&($.update.call(c,o,i)&&(l=!0))}),l},layer:function(e,t){var n=e.$layer=m('<div id="context-menu-layer"></div>').css({height:p.height(),width:p.width(),display:"block",position:"fixed","z-index":t,top:0,left:0,opacity:0,filter:"alpha(opacity=0)","background-color":"#000"}).data("contextMenuRoot",e).insertBefore(this).on("contextmenu",b.abortevent).on("mousedown",b.layerClick);return void 0===document.body.style.maxWidth&&n.css({position:"absolute",height:m(document).height()}),n},processPromises:function(e,t,n){function o(e,t,n){void 0===n?(n={error:{name:"No items and no error item",icon:"context-menu-icon context-menu-icon-quit"}},window.console&&(console.error||console.log).call(console,'When you reject a promise, provide an "items" object, equal to normal sub-menu items')):"string"==typeof n&&(n={error:{name:n}}),a(e,t,n)}function a(e,t,n){void 0!==t.$menu&&t.$menu.is(":visible")&&(e.$node.removeClass(t.classNames.iconLoadingClass),e.items=n,$.create(e,t,!0),$.update(e,t),t.positionSubmenu.call(e.$node,e.$menu))}e.$node.addClass(t.classNames.iconLoadingClass),n.then(function(e,t,n){void 0===n&&o(void 0),a(e,t,n)}.bind(this,e,t),o.bind(this,e,t))},activated:function(e){var t=e.$menu,n=t.offset(),o=m(window).height(),a=m(window).scrollTop(),s=t.height();o<s?t.css({height:o+"px","overflow-x":"hidden","overflow-y":"auto",top:a+"px"}):(n.top<a||n.top+s>a+o)&&t.css({top:"0px"})}};function l(e){return e.id&&m('label[for="'+e.id+'"]').val()||e.name}m.fn.contextMenu=function(e){var t=this,n=e;if(0<this.length)if(void 0===e)this.first().trigger("contextmenu");else if(void 0!==e.x&&void 0!==e.y)this.first().trigger(m.Event("contextmenu",{pageX:e.x,pageY:e.y,mouseButton:e.button}));else if("hide"===e){var o=this.first().data("contextMenu")?this.first().data("contextMenu").$menu:null;o&&o.trigger("contextmenu:hide")}else"destroy"===e?m.contextMenu("destroy",{context:this}):m.isPlainObject(e)?(e.context=this,m.contextMenu("create",e)):e?this.removeClass("context-menu-disabled"):e||this.addClass("context-menu-disabled");else m.each(x,function(){this.selector===t.selector&&(n.data=this,m.extend(n.data,{trigger:"demand"}))}),b.contextmenu.call(n.target,n);return this},m.contextMenu=function(e,t){"string"!=typeof e&&(t=e,e="create"),"string"==typeof t?t={selector:t}:void 0===t&&(t={});var n=m.extend(!0,{},g,t||{}),o=m(document),a=o,s=!1;switch(n.context&&n.context.length?(a=m(n.context).first(),n.context=a.get(0),s=!m(n.context).is(document)):n.context=document,e){case"update":if(s)$.update(a);else for(var i in x)x.hasOwnProperty(i)&&$.update(x[i]);break;case"create":if(!n.selector)throw new Error("No selector specified");if(n.selector.match(/.context-menu-(list|item|input)($|\s)/))throw new Error('Cannot bind to selector "'+n.selector+'" as it contains a reserved className');if(!n.build&&(!n.items||m.isEmptyObject(n.items)))throw new Error("No Items specified");if(f++,n.ns=".contextMenu"+f,s||(h[n.selector]=n.ns),(x[n.ns]=n).trigger||(n.trigger="right"),!d){var c="click"===n.itemClickEvent?"click.contextMenu":"mouseup.contextMenu",l={"contextmenu:focus.contextMenu":b.focusItem,"contextmenu:blur.contextMenu":b.blurItem,"contextmenu.contextMenu":b.abortevent,"mouseenter.contextMenu":b.itemMouseenter,"mouseleave.contextMenu":b.itemMouseleave};l[c]=b.itemClick,o.on({"contextmenu:hide.contextMenu":b.hideMenu,"prevcommand.contextMenu":b.prevItem,"nextcommand.contextMenu":b.nextItem,"contextmenu.contextMenu":b.abortevent,"mouseenter.contextMenu":b.menuMouseenter,"mouseleave.contextMenu":b.menuMouseleave},".context-menu-list").on("mouseup.contextMenu",".context-menu-input",b.inputClick).on(l,".context-menu-item"),d=!0}switch(a.on("contextmenu"+n.ns,n.selector,n,b.contextmenu),s&&a.on("remove"+n.ns,function(){m(this).contextMenu("destroy")}),n.trigger){case"hover":a.on("mouseenter"+n.ns,n.selector,n,b.mouseenter).on("mouseleave"+n.ns,n.selector,n,b.mouseleave);break;case"left":a.on("click"+n.ns,n.selector,n,b.click);break;case"touchstart":a.on("touchstart"+n.ns,n.selector,n,b.click)}n.build||$.create(n);break;case"destroy":var r;if(s){var u=n.context;m.each(x,function(e,t){if(!t)return!0;if(!m(u).is(t.selector))return!0;(r=m(".context-menu-list").filter(":visible")).length&&r.data().contextMenuRoot.$trigger.is(m(t.context).find(t.selector))&&r.trigger("contextmenu:hide",{force:!0});try{x[t.ns].$menu&&x[t.ns].$menu.remove(),delete x[t.ns]}catch(e){x[t.ns]=null}return m(t.context).off(t.ns),!0})}else if(n.selector){if(h[n.selector]){(r=m(".context-menu-list").filter(":visible")).length&&r.data().contextMenuRoot.$trigger.is(n.selector)&&r.trigger("contextmenu:hide",{force:!0});try{x[h[n.selector]].$menu&&x[h[n.selector]].$menu.remove(),delete x[h[n.selector]]}catch(e){x[h[n.selector]]=null}o.off(h[n.selector])}}else o.off(".contextMenu .contextMenuAutoHide"),m.each(x,function(e,t){m(t.context).off(t.ns)}),h={},x={},f=0,d=!1,m("#context-menu-layer, .context-menu-list").remove();break;case"html5":(!m.support.htmlCommand&&!m.support.htmlMenuitem||"boolean"==typeof t&&t)&&m('menu[type="context"]').each(function(){this.id&&m.contextMenu({selector:"[contextmenu="+this.id+"]",items:m.contextMenu.fromMenu(this)})}).css("display","none");break;default:throw new Error('Unknown operation "'+e+'"')}return this},m.contextMenu.setInputValues=function(e,n){void 0===n&&(n={}),m.each(e.inputs,function(e,t){switch(t.type){case"text":case"textarea":t.value=n[e]||"";break;case"checkbox":t.selected=!!n[e];break;case"radio":t.selected=(n[t.radio]||"")===t.value;break;case"select":t.selected=n[e]||""}})},m.contextMenu.getInputValues=function(e,n){return void 0===n&&(n={}),m.each(e.inputs,function(e,t){switch(t.type){case"text":case"textarea":case"select":n[e]=t.$input.val();break;case"checkbox":n[e]=t.$input.prop("checked");break;case"radio":t.$input.prop("checked")&&(n[t.radio]=t.value)}}),n},m.contextMenu.fromMenu=function(e){var t={};return function s(i,e,c){return c||(c=0),e.each(function(){var e,t,n=m(this),o=this,a=this.nodeName.toLowerCase();switch("label"===a&&n.find("input, textarea, select").length&&(e=n.text(),a=(o=(n=n.children().first()).get(0)).nodeName.toLowerCase()),a){case"menu":t={name:n.attr("label"),items:{}},c=s(t.items,n.children(),c);break;case"a":case"button":t={name:n.text(),disabled:!!n.attr("disabled"),callback:function(){n.get(0).click()}};break;case"menuitem":case"command":switch(n.attr("type")){case void 0:case"command":case"menuitem":t={name:n.attr("label"),disabled:!!n.attr("disabled"),icon:n.attr("icon"),callback:function(){n.get(0).click()}};break;case"checkbox":t={type:"checkbox",disabled:!!n.attr("disabled"),name:n.attr("label"),selected:!!n.attr("checked")};break;case"radio":t={type:"radio",disabled:!!n.attr("disabled"),name:n.attr("label"),radio:n.attr("radiogroup"),value:n.attr("id"),selected:!!n.attr("checked")};break;default:t=void 0}break;case"hr":t="-------";break;case"input":switch(n.attr("type")){case"text":t={type:"text",name:e||l(o),disabled:!!n.attr("disabled"),value:n.val()};break;case"checkbox":t={type:"checkbox",name:e||l(o),disabled:!!n.attr("disabled"),selected:!!n.attr("checked")};break;case"radio":t={type:"radio",name:e||l(o),disabled:!!n.attr("disabled"),radio:!!n.attr("name"),value:n.val(),selected:!!n.attr("checked")};break;default:t=void 0}break;case"select":t={type:"select",name:e||l(o),disabled:!!n.attr("disabled"),selected:n.val(),options:{}},n.children().each(function(){t.options[this.value]=m(this).text()});break;case"textarea":t={type:"textarea",name:e||l(o),disabled:!!n.attr("disabled"),value:n.val()};break;case"label":break;default:t={type:"html",html:n.clone(!0)}}t&&(i["key"+ ++c]=t)}),c}(t,m(e).children()),t},m.contextMenu.defaults=g,m.contextMenu.types=v,m.contextMenu.handle=b,m.contextMenu.op=$,m.contextMenu.menus=x});
//# sourceMappingURL=jquery.contextMenu.min.js.map

/*! jQuery UI - v1.12.1 - 2016-09-16
 * http://jqueryui.com
 * Includes: position.js
 * Copyright jQuery Foundation and other contributors; Licensed MIT */

(function( factory ) {
    if ( typeof define === "function" && define.amd ) {

        // AMD. Register as an anonymous module.
        define([ "jquery" ], factory );
    } else {

        // Browser globals
        factory( jQuery );
    }
}(function( $ ) {

    $.ui = $.ui || {};

    var version = $.ui.version = "1.12.1";


    /*!
     * jQuery UI Position 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     * http://api.jqueryui.com/position/
     */

//>>label: Position
//>>group: Core
//>>description: Positions elements relative to other elements.
//>>docs: http://api.jqueryui.com/position/
//>>demos: http://jqueryui.com/position/


    ( function() {
        var cachedScrollbarWidth,
            max = Math.max,
            abs = Math.abs,
            rhorizontal = /left|center|right/,
            rvertical = /top|center|bottom/,
            roffset = /[\+\-]\d+(\.[\d]+)?%?/,
            rposition = /^\w+/,
            rpercent = /%$/,
            _position = $.fn.position;

        function getOffsets( offsets, width, height ) {
            return [
                parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
                parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
            ];
        }

        function parseCss( element, property ) {
            return parseInt( $.css( element, property ), 10 ) || 0;
        }

        function getDimensions( elem ) {
            var raw = elem[ 0 ];
            if ( raw.nodeType === 9 ) {
                return {
                    width: elem.width(),
                    height: elem.height(),
                    offset: { top: 0, left: 0 }
                };
            }
            if ( $.isWindow( raw ) ) {
                return {
                    width: elem.width(),
                    height: elem.height(),
                    offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
                };
            }
            if ( raw.preventDefault ) {
                return {
                    width: 0,
                    height: 0,
                    offset: { top: raw.pageY, left: raw.pageX }
                };
            }
            return {
                width: elem.outerWidth(),
                height: elem.outerHeight(),
                offset: elem.offset()
            };
        }

        $.position = {
            scrollbarWidth: function() {
                if ( cachedScrollbarWidth !== undefined ) {
                    return cachedScrollbarWidth;
                }
                var w1, w2,
                    div = $( "<div " +
                        "style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'>" +
                        "<div style='height:100px;width:auto;'></div></div>" ),
                    innerDiv = div.children()[ 0 ];

                $( "body" ).append( div );
                w1 = innerDiv.offsetWidth;
                div.css( "overflow", "scroll" );

                w2 = innerDiv.offsetWidth;

                if ( w1 === w2 ) {
                    w2 = div[ 0 ].clientWidth;
                }

                div.remove();

                return ( cachedScrollbarWidth = w1 - w2 );
            },
            getScrollInfo: function( within ) {
                var overflowX = within.isWindow || within.isDocument ? "" :
                        within.element.css( "overflow-x" ),
                    overflowY = within.isWindow || within.isDocument ? "" :
                        within.element.css( "overflow-y" ),
                    hasOverflowX = overflowX === "scroll" ||
                        ( overflowX === "auto" && within.width < within.element[ 0 ].scrollWidth ),
                    hasOverflowY = overflowY === "scroll" ||
                        ( overflowY === "auto" && within.height < within.element[ 0 ].scrollHeight );
                return {
                    width: hasOverflowY ? $.position.scrollbarWidth() : 0,
                    height: hasOverflowX ? $.position.scrollbarWidth() : 0
                };
            },
            getWithinInfo: function( element ) {
                var withinElement = $( element || window ),
                    isWindow = $.isWindow( withinElement[ 0 ] ),
                    isDocument = !!withinElement[ 0 ] && withinElement[ 0 ].nodeType === 9,
                    hasOffset = !isWindow && !isDocument;
                return {
                    element: withinElement,
                    isWindow: isWindow,
                    isDocument: isDocument,
                    offset: hasOffset ? $( element ).offset() : { left: 0, top: 0 },
                    scrollLeft: withinElement.scrollLeft(),
                    scrollTop: withinElement.scrollTop(),
                    width: withinElement.outerWidth(),
                    height: withinElement.outerHeight()
                };
            }
        };

        $.fn.position = function( options ) {
            if ( !options || !options.of ) {
                return _position.apply( this, arguments );
            }

            // Make a copy, we don't want to modify arguments
            options = $.extend( {}, options );

            var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,
                target = $( options.of ),
                within = $.position.getWithinInfo( options.within ),
                scrollInfo = $.position.getScrollInfo( within ),
                collision = ( options.collision || "flip" ).split( " " ),
                offsets = {};

            dimensions = getDimensions( target );
            if ( target[ 0 ].preventDefault ) {

                // Force left top to allow flipping
                options.at = "left top";
            }
            targetWidth = dimensions.width;
            targetHeight = dimensions.height;
            targetOffset = dimensions.offset;

            // Clone to reuse original targetOffset later
            basePosition = $.extend( {}, targetOffset );

            // Force my and at to have valid horizontal and vertical positions
            // if a value is missing or invalid, it will be converted to center
            $.each( [ "my", "at" ], function() {
                var pos = ( options[ this ] || "" ).split( " " ),
                    horizontalOffset,
                    verticalOffset;

                if ( pos.length === 1 ) {
                    pos = rhorizontal.test( pos[ 0 ] ) ?
                        pos.concat( [ "center" ] ) :
                        rvertical.test( pos[ 0 ] ) ?
                            [ "center" ].concat( pos ) :
                            [ "center", "center" ];
                }
                pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
                pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";

                // Calculate offsets
                horizontalOffset = roffset.exec( pos[ 0 ] );
                verticalOffset = roffset.exec( pos[ 1 ] );
                offsets[ this ] = [
                    horizontalOffset ? horizontalOffset[ 0 ] : 0,
                    verticalOffset ? verticalOffset[ 0 ] : 0
                ];

                // Reduce to just the positions without the offsets
                options[ this ] = [
                    rposition.exec( pos[ 0 ] )[ 0 ],
                    rposition.exec( pos[ 1 ] )[ 0 ]
                ];
            } );

            // Normalize collision option
            if ( collision.length === 1 ) {
                collision[ 1 ] = collision[ 0 ];
            }

            if ( options.at[ 0 ] === "right" ) {
                basePosition.left += targetWidth;
            } else if ( options.at[ 0 ] === "center" ) {
                basePosition.left += targetWidth / 2;
            }

            if ( options.at[ 1 ] === "bottom" ) {
                basePosition.top += targetHeight;
            } else if ( options.at[ 1 ] === "center" ) {
                basePosition.top += targetHeight / 2;
            }

            atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
            basePosition.left += atOffset[ 0 ];
            basePosition.top += atOffset[ 1 ];

            return this.each( function() {
                var collisionPosition, using,
                    elem = $( this ),
                    elemWidth = elem.outerWidth(),
                    elemHeight = elem.outerHeight(),
                    marginLeft = parseCss( this, "marginLeft" ),
                    marginTop = parseCss( this, "marginTop" ),
                    collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) +
                        scrollInfo.width,
                    collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) +
                        scrollInfo.height,
                    position = $.extend( {}, basePosition ),
                    myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );

                if ( options.my[ 0 ] === "right" ) {
                    position.left -= elemWidth;
                } else if ( options.my[ 0 ] === "center" ) {
                    position.left -= elemWidth / 2;
                }

                if ( options.my[ 1 ] === "bottom" ) {
                    position.top -= elemHeight;
                } else if ( options.my[ 1 ] === "center" ) {
                    position.top -= elemHeight / 2;
                }

                position.left += myOffset[ 0 ];
                position.top += myOffset[ 1 ];

                collisionPosition = {
                    marginLeft: marginLeft,
                    marginTop: marginTop
                };

                $.each( [ "left", "top" ], function( i, dir ) {
                    if ( $.ui.position[ collision[ i ] ] ) {
                        $.ui.position[ collision[ i ] ][ dir ]( position, {
                            targetWidth: targetWidth,
                            targetHeight: targetHeight,
                            elemWidth: elemWidth,
                            elemHeight: elemHeight,
                            collisionPosition: collisionPosition,
                            collisionWidth: collisionWidth,
                            collisionHeight: collisionHeight,
                            offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
                            my: options.my,
                            at: options.at,
                            within: within,
                            elem: elem
                        } );
                    }
                } );

                if ( options.using ) {

                    // Adds feedback as second argument to using callback, if present
                    using = function( props ) {
                        var left = targetOffset.left - position.left,
                            right = left + targetWidth - elemWidth,
                            top = targetOffset.top - position.top,
                            bottom = top + targetHeight - elemHeight,
                            feedback = {
                                target: {
                                    element: target,
                                    left: targetOffset.left,
                                    top: targetOffset.top,
                                    width: targetWidth,
                                    height: targetHeight
                                },
                                element: {
                                    element: elem,
                                    left: position.left,
                                    top: position.top,
                                    width: elemWidth,
                                    height: elemHeight
                                },
                                horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
                                vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
                            };
                        if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
                            feedback.horizontal = "center";
                        }
                        if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
                            feedback.vertical = "middle";
                        }
                        if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
                            feedback.important = "horizontal";
                        } else {
                            feedback.important = "vertical";
                        }
                        options.using.call( this, props, feedback );
                    };
                }

                elem.offset( $.extend( position, { using: using } ) );
            } );
        };

        $.ui.position = {
            fit: {
                left: function( position, data ) {
                    var within = data.within,
                        withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
                        outerWidth = within.width,
                        collisionPosLeft = position.left - data.collisionPosition.marginLeft,
                        overLeft = withinOffset - collisionPosLeft,
                        overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
                        newOverRight;

                    // Element is wider than within
                    if ( data.collisionWidth > outerWidth ) {

                        // Element is initially over the left side of within
                        if ( overLeft > 0 && overRight <= 0 ) {
                            newOverRight = position.left + overLeft + data.collisionWidth - outerWidth -
                                withinOffset;
                            position.left += overLeft - newOverRight;

                            // Element is initially over right side of within
                        } else if ( overRight > 0 && overLeft <= 0 ) {
                            position.left = withinOffset;

                            // Element is initially over both left and right sides of within
                        } else {
                            if ( overLeft > overRight ) {
                                position.left = withinOffset + outerWidth - data.collisionWidth;
                            } else {
                                position.left = withinOffset;
                            }
                        }

                        // Too far left -> align with left edge
                    } else if ( overLeft > 0 ) {
                        position.left += overLeft;

                        // Too far right -> align with right edge
                    } else if ( overRight > 0 ) {
                        position.left -= overRight;

                        // Adjust based on position and margin
                    } else {
                        position.left = max( position.left - collisionPosLeft, position.left );
                    }
                },
                top: function( position, data ) {
                    var within = data.within,
                        withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
                        outerHeight = data.within.height,
                        collisionPosTop = position.top - data.collisionPosition.marginTop,
                        overTop = withinOffset - collisionPosTop,
                        overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
                        newOverBottom;

                    // Element is taller than within
                    if ( data.collisionHeight > outerHeight ) {

                        // Element is initially over the top of within
                        if ( overTop > 0 && overBottom <= 0 ) {
                            newOverBottom = position.top + overTop + data.collisionHeight - outerHeight -
                                withinOffset;
                            position.top += overTop - newOverBottom;

                            // Element is initially over bottom of within
                        } else if ( overBottom > 0 && overTop <= 0 ) {
                            position.top = withinOffset;

                            // Element is initially over both top and bottom of within
                        } else {
                            if ( overTop > overBottom ) {
                                position.top = withinOffset + outerHeight - data.collisionHeight;
                            } else {
                                position.top = withinOffset;
                            }
                        }

                        // Too far up -> align with top
                    } else if ( overTop > 0 ) {
                        position.top += overTop;

                        // Too far down -> align with bottom edge
                    } else if ( overBottom > 0 ) {
                        position.top -= overBottom;

                        // Adjust based on position and margin
                    } else {
                        position.top = max( position.top - collisionPosTop, position.top );
                    }
                }
            },
            flip: {
                left: function( position, data ) {
                    var within = data.within,
                        withinOffset = within.offset.left + within.scrollLeft,
                        outerWidth = within.width,
                        offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
                        collisionPosLeft = position.left - data.collisionPosition.marginLeft,
                        overLeft = collisionPosLeft - offsetLeft,
                        overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
                        myOffset = data.my[ 0 ] === "left" ?
                            -data.elemWidth :
                            data.my[ 0 ] === "right" ?
                                data.elemWidth :
                                0,
                        atOffset = data.at[ 0 ] === "left" ?
                            data.targetWidth :
                            data.at[ 0 ] === "right" ?
                                -data.targetWidth :
                                0,
                        offset = -2 * data.offset[ 0 ],
                        newOverRight,
                        newOverLeft;

                    if ( overLeft < 0 ) {
                        newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth -
                            outerWidth - withinOffset;
                        if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
                            position.left += myOffset + atOffset + offset;
                        }
                    } else if ( overRight > 0 ) {
                        newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset +
                            atOffset + offset - offsetLeft;
                        if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
                            position.left += myOffset + atOffset + offset;
                        }
                    }
                },
                top: function( position, data ) {
                    var within = data.within,
                        withinOffset = within.offset.top + within.scrollTop,
                        outerHeight = within.height,
                        offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
                        collisionPosTop = position.top - data.collisionPosition.marginTop,
                        overTop = collisionPosTop - offsetTop,
                        overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
                        top = data.my[ 1 ] === "top",
                        myOffset = top ?
                            -data.elemHeight :
                            data.my[ 1 ] === "bottom" ?
                                data.elemHeight :
                                0,
                        atOffset = data.at[ 1 ] === "top" ?
                            data.targetHeight :
                            data.at[ 1 ] === "bottom" ?
                                -data.targetHeight :
                                0,
                        offset = -2 * data.offset[ 1 ],
                        newOverTop,
                        newOverBottom;
                    if ( overTop < 0 ) {
                        newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight -
                            outerHeight - withinOffset;
                        if ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) {
                            position.top += myOffset + atOffset + offset;
                        }
                    } else if ( overBottom > 0 ) {
                        newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset +
                            offset - offsetTop;
                        if ( newOverTop > 0 || abs( newOverTop ) < overBottom ) {
                            position.top += myOffset + atOffset + offset;
                        }
                    }
                }
            },
            flipfit: {
                left: function() {
                    $.ui.position.flip.left.apply( this, arguments );
                    $.ui.position.fit.left.apply( this, arguments );
                },
                top: function() {
                    $.ui.position.flip.top.apply( this, arguments );
                    $.ui.position.fit.top.apply( this, arguments );
                }
            }
        };

    } )();

    var position = $.ui.position;




}));
/*!
 * Pikaday
 *
 * Copyright © 2014 David Bushell | BSD & MIT license | https://github.com/dbushell/Pikaday
 */

(function (root, factory)
{
    'use strict';

    var moment;
    if (typeof exports === 'object') {
        // CommonJS module
        // Load moment.js as an optional dependency
        try { moment = require('moment'); } catch (e) {}
        module.exports = factory(moment);
    } else if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(function (req)
        {
            // Load moment.js as an optional dependency
            var id = 'moment';
            try { moment = req(id); } catch (e) {}
            return factory(moment);
        });
    } else {
        root.Pikaday = factory(root.moment);
    }
}(this, function (moment)
{
    'use strict';

    /**
     * feature detection and helper functions
     */
    var hasMoment = typeof moment === 'function',

    hasEventListeners = !!window.addEventListener,

    document = window.document,

    sto = window.setTimeout,

    addEvent = function(el, e, callback, capture)
    {
        if (hasEventListeners) {
            el.addEventListener(e, callback, !!capture);
        } else {
            el.attachEvent('on' + e, callback);
        }
    },

    removeEvent = function(el, e, callback, capture)
    {
        if (hasEventListeners) {
            el.removeEventListener(e, callback, !!capture);
        } else {
            el.detachEvent('on' + e, callback);
        }
    },

    trim = function(str)
    {
        return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g,'');
    },

    hasClass = function(el, cn)
    {
        return (' ' + el.className + ' ').indexOf(' ' + cn + ' ') !== -1;
    },

    addClass = function(el, cn)
    {
        if (!hasClass(el, cn)) {
            el.className = (el.className === '') ? cn : el.className + ' ' + cn;
        }
    },

    removeClass = function(el, cn)
    {
        el.className = trim((' ' + el.className + ' ').replace(' ' + cn + ' ', ' '));
    },

    isArray = function(obj)
    {
        return (/Array/).test(Object.prototype.toString.call(obj));
    },

    isDate = function(obj)
    {
        return (/Date/).test(Object.prototype.toString.call(obj)) && !isNaN(obj.getTime());
    },

    isWeekend = function(date)
    {
        var day = date.getDay();
        return day === 0 || day === 6;
    },

    isLeapYear = function(year)
    {
        // solution by Matti Virkkunen: http://stackoverflow.com/a/4881951
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    },

    getDaysInMonth = function(year, month)
    {
        return [31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
    },

    setToStartOfDay = function(date)
    {
        if (isDate(date)) date.setHours(0,0,0,0);
    },

    compareDates = function(a,b)
    {
        // weak date comparison (use setToStartOfDay(date) to ensure correct result)
        return a.getTime() === b.getTime();
    },

    extend = function(to, from, overwrite)
    {
        var prop, hasProp;
        for (prop in from) {
            hasProp = to[prop] !== undefined;
            if (hasProp && typeof from[prop] === 'object' && from[prop] !== null && from[prop].nodeName === undefined) {
                if (isDate(from[prop])) {
                    if (overwrite) {
                        to[prop] = new Date(from[prop].getTime());
                    }
                }
                else if (isArray(from[prop])) {
                    if (overwrite) {
                        to[prop] = from[prop].slice(0);
                    }
                } else {
                    to[prop] = extend({}, from[prop], overwrite);
                }
            } else if (overwrite || !hasProp) {
                to[prop] = from[prop];
            }
        }
        return to;
    },

    fireEvent = function(el, eventName, data)
    {
        var ev;

        if (document.createEvent) {
            ev = document.createEvent('HTMLEvents');
            ev.initEvent(eventName, true, false);
            ev = extend(ev, data);
            el.dispatchEvent(ev);
        } else if (document.createEventObject) {
            ev = document.createEventObject();
            ev = extend(ev, data);
            el.fireEvent('on' + eventName, ev);
        }
    },

    adjustCalendar = function(calendar) {
        if (calendar.month < 0) {
            calendar.year -= Math.ceil(Math.abs(calendar.month)/12);
            calendar.month += 12;
        }
        if (calendar.month > 11) {
            calendar.year += Math.floor(Math.abs(calendar.month)/12);
            calendar.month -= 12;
        }
        return calendar;
    },

    /**
     * defaults and localisation
     */
    defaults = {

        // bind the picker to a form field
        field: null,

        // automatically show/hide the picker on `field` focus (default `true` if `field` is set)
        bound: undefined,

        // data-attribute on the input field with an aria assistance tekst (only applied when `bound` is set)
        ariaLabel: 'Use the arrow keys to pick a date',

        // position of the datepicker, relative to the field (default to bottom & left)
        // ('bottom' & 'left' keywords are not used, 'top' & 'right' are modifier on the bottom/left position)
        position: 'bottom left',

        // automatically fit in the viewport even if it means repositioning from the position option
        reposition: true,

        // the default output format for `.toString()` and `field` value
        format: 'YYYY-MM-DD',

        // the toString function which gets passed a current date object and format
        // and returns a string
        toString: null,

        // used to create date object from current input string
        parse: null,

        // the initial date to view when first opened
        defaultDate: null,

        // make the `defaultDate` the initial selected value
        setDefaultDate: false,

        // first day of week (0: Sunday, 1: Monday etc)
        firstDay: 0,

        // the default flag for moment's strict date parsing
        formatStrict: false,

        // the minimum/earliest date that can be selected
        minDate: null,
        // the maximum/latest date that can be selected
        maxDate: null,

        // number of years either side, or array of upper/lower range
        yearRange: 10,

        // show week numbers at head of row
        showWeekNumber: false,

        // Week picker mode
        pickWholeWeek: false,

        // used internally (don't config outside)
        minYear: 0,
        maxYear: 9999,
        minMonth: undefined,
        maxMonth: undefined,

        startRange: null,
        endRange: null,

        isRTL: false,

        // Additional text to append to the year in the calendar title
        yearSuffix: '',

        // Render the month after year in the calendar title
        showMonthAfterYear: false,

        // Render days of the calendar grid that fall in the next or previous month
        showDaysInNextAndPreviousMonths: false,

        // Allows user to select days that fall in the next or previous month
        enableSelectionDaysInNextAndPreviousMonths: false,

        // how many months are visible
        numberOfMonths: 1,

        // when numberOfMonths is used, this will help you to choose where the main calendar will be (default `left`, can be set to `right`)
        // only used for the first display or when a selected date is not visible
        mainCalendar: 'left',

        // Specify a DOM element to render the calendar in
        container: undefined,

        // Blur field when date is selected
        blurFieldOnSelect : true,

        // internationalization
        i18n: {
            previousMonth : 'Previous Month',
            nextMonth     : 'Next Month',
            months        : ['January','February','March','April','May','June','July','August','September','October','November','December'],
            weekdays      : ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],
            weekdaysShort : ['Sun','Mon','Tue','Wed','Thu','Fri','Sat']
        },

        // Theme Classname
        theme: null,

        // events array
        events: [],

        // callback function
        onSelect: null,
        onOpen: null,
        onClose: null,
        onDraw: null,

        // Enable keyboard input
        keyboardInput: true
    },


    /**
     * templating functions to abstract HTML rendering
     */
    renderDayName = function(opts, day, abbr)
    {
        day += opts.firstDay;
        while (day >= 7) {
            day -= 7;
        }
        return abbr ? opts.i18n.weekdaysShort[day] : opts.i18n.weekdays[day];
    },

    renderDay = function(opts)
    {
        var arr = [];
        var ariaSelected = 'false';
        if (opts.isEmpty) {
            if (opts.showDaysInNextAndPreviousMonths) {
                arr.push('is-outside-current-month');

                if(!opts.enableSelectionDaysInNextAndPreviousMonths) {
                    arr.push('is-selection-disabled');
                }

            } else {
                return '<td class="is-empty"></td>';
            }
        }
        if (opts.isDisabled) {
            arr.push('is-disabled');
        }
        if (opts.isToday) {
            arr.push('is-today');
        }
        if (opts.isSelected) {
            arr.push('is-selected');
            ariaSelected = 'true';
        }
        if (opts.hasEvent) {
            arr.push('has-event');
        }
        if (opts.isInRange) {
            arr.push('is-inrange');
        }
        if (opts.isStartRange) {
            arr.push('is-startrange');
        }
        if (opts.isEndRange) {
            arr.push('is-endrange');
        }
        return '<td data-day="' + opts.day + '" class="' + arr.join(' ') + '" aria-selected="' + ariaSelected + '">' +
                 '<button class="pika-button pika-day" type="button" ' +
                    'data-pika-year="' + opts.year + '" data-pika-month="' + opts.month + '" data-pika-day="' + opts.day + '">' +
                        opts.day +
                 '</button>' +
               '</td>';
    },

    renderWeek = function (d, m, y) {
        // Lifted from http://javascript.about.com/library/blweekyear.htm, lightly modified.
        var onejan = new Date(y, 0, 1),
            weekNum = Math.ceil((((new Date(y, m, d) - onejan) / 86400000) + onejan.getDay()+1)/7);
        return '<td class="pika-week">' + weekNum + '</td>';
    },

    renderRow = function(days, isRTL, pickWholeWeek, isRowSelected)
    {
        return '<tr class="pika-row' + (pickWholeWeek ? ' pick-whole-week' : '') + (isRowSelected ? ' is-selected' : '') + '">' + (isRTL ? days.reverse() : days).join('') + '</tr>';
    },

    renderBody = function(rows)
    {
        return '<tbody>' + rows.join('') + '</tbody>';
    },

    renderHead = function(opts)
    {
        var i, arr = [];
        if (opts.showWeekNumber) {
            arr.push('<th></th>');
        }
        for (i = 0; i < 7; i++) {
            arr.push('<th scope="col"><abbr title="' + renderDayName(opts, i) + '">' + renderDayName(opts, i, true) + '</abbr></th>');
        }
        return '<thead><tr>' + (opts.isRTL ? arr.reverse() : arr).join('') + '</tr></thead>';
    },

    renderTitle = function(instance, c, year, month, refYear, randId)
    {
        var i, j, arr,
            opts = instance._o,
            isMinYear = year === opts.minYear,
            isMaxYear = year === opts.maxYear,
            html = '<div id="' + randId + '" class="pika-title" role="heading" aria-live="assertive">',
            monthHtml,
            yearHtml,
            prev = true,
            next = true;

        for (arr = [], i = 0; i < 12; i++) {
            arr.push('<option value="' + (year === refYear ? i - c : 12 + i - c) + '"' +
                (i === month ? ' selected="selected"': '') +
                ((isMinYear && i < opts.minMonth) || (isMaxYear && i > opts.maxMonth) ? 'disabled="disabled"' : '') + '>' +
                opts.i18n.months[i] + '</option>');
        }

        monthHtml = '<div class="pika-label">' + opts.i18n.months[month] + '<select class="pika-select pika-select-month" tabindex="-1">' + arr.join('') + '</select></div>';

        if (isArray(opts.yearRange)) {
            i = opts.yearRange[0];
            j = opts.yearRange[1] + 1;
        } else {
            i = year - opts.yearRange;
            j = 1 + year + opts.yearRange;
        }

        for (arr = []; i < j && i <= opts.maxYear; i++) {
            if (i >= opts.minYear) {
                arr.push('<option value="' + i + '"' + (i === year ? ' selected="selected"': '') + '>' + (i) + '</option>');
            }
        }
        yearHtml = '<div class="pika-label">' + year + opts.yearSuffix + '<select class="pika-select pika-select-year" tabindex="-1">' + arr.join('') + '</select></div>';

        if (opts.showMonthAfterYear) {
            html += yearHtml + monthHtml;
        } else {
            html += monthHtml + yearHtml;
        }

        if (isMinYear && (month === 0 || opts.minMonth >= month)) {
            prev = false;
        }

        if (isMaxYear && (month === 11 || opts.maxMonth <= month)) {
            next = false;
        }

        if (c === 0) {
            html += '<button class="pika-prev' + (prev ? '' : ' is-disabled') + '" type="button">' + opts.i18n.previousMonth + '</button>';
        }
        if (c === (instance._o.numberOfMonths - 1) ) {
            html += '<button class="pika-next' + (next ? '' : ' is-disabled') + '" type="button">' + opts.i18n.nextMonth + '</button>';
        }

        return html += '</div>';
    },

    renderTable = function(opts, data, randId)
    {
        return '<table cellpadding="0" cellspacing="0" class="pika-table" role="grid" aria-labelledby="' + randId + '">' + renderHead(opts) + renderBody(data) + '</table>';
    },


    /**
     * Pikaday constructor
     */
    Pikaday = function(options)
    {
        var self = this,
            opts = self.config(options);

        self._onMouseDown = function(e)
        {
            if (!self._v) {
                return;
            }
            e = e || window.event;
            var target = e.target || e.srcElement;
            if (!target) {
                return;
            }

            if (!hasClass(target, 'is-disabled')) {
                if (hasClass(target, 'pika-button') && !hasClass(target, 'is-empty') && !hasClass(target.parentNode, 'is-disabled')) {
                    self.setDate(new Date(target.getAttribute('data-pika-year'), target.getAttribute('data-pika-month'), target.getAttribute('data-pika-day')));
                    if (opts.bound) {
                        sto(function() {
                            self.hide();
                            if (opts.blurFieldOnSelect && opts.field) {
                                opts.field.blur();
                            }
                        }, 100);
                    }
                }
                else if (hasClass(target, 'pika-prev')) {
                    self.prevMonth();
                }
                else if (hasClass(target, 'pika-next')) {
                    self.nextMonth();
                }
            }
            if (!hasClass(target, 'pika-select')) {
                // if this is touch event prevent mouse events emulation
                if (e.preventDefault) {
                    e.preventDefault();
                } else {
                    e.returnValue = false;
                    return false;
                }
            } else {
                self._c = true;
            }
        };

        self._onChange = function(e)
        {
            e = e || window.event;
            var target = e.target || e.srcElement;
            if (!target) {
                return;
            }
            if (hasClass(target, 'pika-select-month')) {
                self.gotoMonth(target.value);
            }
            else if (hasClass(target, 'pika-select-year')) {
                self.gotoYear(target.value);
            }
        };

        self._onKeyChange = function(e)
        {
            e = e || window.event;

            if (self.isVisible()) {

                switch(e.keyCode){
                    case 13:
                    case 27:
                        if (opts.field) {
                            opts.field.blur();
                        }
                        break;
                    case 37:
                        e.preventDefault();
                        self.adjustDate('subtract', 1);
                        break;
                    case 38:
                        self.adjustDate('subtract', 7);
                        break;
                    case 39:
                        self.adjustDate('add', 1);
                        break;
                    case 40:
                        self.adjustDate('add', 7);
                        break;
                }
            }
        };

        self._onInputChange = function(e)
        {
            var date;

            if (e.firedBy === self) {
                return;
            }
            if (opts.parse) {
                date = opts.parse(opts.field.value, opts.format);
            } else if (hasMoment) {
                date = moment(opts.field.value, opts.format, opts.formatStrict);
                date = (date && date.isValid()) ? date.toDate() : null;
            }
            else {
                date = new Date(Date.parse(opts.field.value));
            }
            if (isDate(date)) {
              self.setDate(date);
            }
            if (!self._v) {
                self.show();
            }
        };

        self._onInputFocus = function()
        {
            self.show();
        };

        self._onInputClick = function()
        {
            self.show();
        };

        self._onInputBlur = function()
        {
            // IE allows pika div to gain focus; catch blur the input field
            var pEl = document.activeElement;
            do {
                if (hasClass(pEl, 'pika-single')) {
                    return;
                }
            }
            while ((pEl = pEl.parentNode));

            if (!self._c) {
                self._b = sto(function() {
                    self.hide();
                }, 50);
            }
            self._c = false;
        };

        self._onClick = function(e)
        {
            e = e || window.event;
            var target = e.target || e.srcElement,
                pEl = target;
            if (!target) {
                return;
            }
            if (!hasEventListeners && hasClass(target, 'pika-select')) {
                if (!target.onchange) {
                    target.setAttribute('onchange', 'return;');
                    addEvent(target, 'change', self._onChange);
                }
            }
            do {
                if (hasClass(pEl, 'pika-single') || pEl === opts.trigger) {
                    return;
                }
            }
            while ((pEl = pEl.parentNode));
            if (self._v && target !== opts.trigger && pEl !== opts.trigger) {
                self.hide();
            }
        };

        self.el = document.createElement('div');
        self.el.className = 'pika-single' + (opts.isRTL ? ' is-rtl' : '') + (opts.theme ? ' ' + opts.theme : '');

        addEvent(self.el, 'mousedown', self._onMouseDown, true);
        addEvent(self.el, 'touchend', self._onMouseDown, true);
        addEvent(self.el, 'change', self._onChange);

        if (opts.keyboardInput) {
            addEvent(document, 'keydown', self._onKeyChange);
        }

        if (opts.field) {
            if (opts.container) {
                opts.container.appendChild(self.el);
            } else if (opts.bound) {
                document.body.appendChild(self.el);
            } else {
                opts.field.parentNode.insertBefore(self.el, opts.field.nextSibling);
            }
            addEvent(opts.field, 'change', self._onInputChange);

            if (!opts.defaultDate) {
                if (hasMoment && opts.field.value) {
                    opts.defaultDate = moment(opts.field.value, opts.format).toDate();
                } else {
                    opts.defaultDate = new Date(Date.parse(opts.field.value));
                }
                opts.setDefaultDate = true;
            }
        }

        var defDate = opts.defaultDate;

        if (isDate(defDate)) {
            if (opts.setDefaultDate) {
                self.setDate(defDate, true);
            } else {
                self.gotoDate(defDate);
            }
        } else {
            self.gotoDate(new Date());
        }

        if (opts.bound) {
            this.hide();
            self.el.className += ' is-bound';
            addEvent(opts.trigger, 'click', self._onInputClick);
            addEvent(opts.trigger, 'focus', self._onInputFocus);
            addEvent(opts.trigger, 'blur', self._onInputBlur);
        } else {
            this.show();
        }
    };


    /**
     * public Pikaday API
     */
    Pikaday.prototype = {


        /**
         * configure functionality
         */
        config: function(options)
        {
            if (!this._o) {
                this._o = extend({}, defaults, true);
            }

            var opts = extend(this._o, options, true);

            opts.isRTL = !!opts.isRTL;

            opts.field = (opts.field && opts.field.nodeName) ? opts.field : null;

            opts.theme = (typeof opts.theme) === 'string' && opts.theme ? opts.theme : null;

            opts.bound = !!(opts.bound !== undefined ? opts.field && opts.bound : opts.field);

            opts.trigger = (opts.trigger && opts.trigger.nodeName) ? opts.trigger : opts.field;

            opts.disableWeekends = !!opts.disableWeekends;

            opts.disableDayFn = (typeof opts.disableDayFn) === 'function' ? opts.disableDayFn : null;

            var nom = parseInt(opts.numberOfMonths, 10) || 1;
            opts.numberOfMonths = nom > 4 ? 4 : nom;

            if (!isDate(opts.minDate)) {
                opts.minDate = false;
            }
            if (!isDate(opts.maxDate)) {
                opts.maxDate = false;
            }
            if ((opts.minDate && opts.maxDate) && opts.maxDate < opts.minDate) {
                opts.maxDate = opts.minDate = false;
            }
            if (opts.minDate) {
                this.setMinDate(opts.minDate);
            }
            if (opts.maxDate) {
                this.setMaxDate(opts.maxDate);
            }

            if (isArray(opts.yearRange)) {
                var fallback = new Date().getFullYear() - 10;
                opts.yearRange[0] = parseInt(opts.yearRange[0], 10) || fallback;
                opts.yearRange[1] = parseInt(opts.yearRange[1], 10) || fallback;
            } else {
                opts.yearRange = Math.abs(parseInt(opts.yearRange, 10)) || defaults.yearRange;
                if (opts.yearRange > 100) {
                    opts.yearRange = 100;
                }
            }

            return opts;
        },

        /**
         * return a formatted string of the current selection (using Moment.js if available)
         */
        toString: function(format)
        {
            format = format || this._o.format;
            if (!isDate(this._d)) {
                return '';
            }
            if (this._o.toString) {
              return this._o.toString(this._d, format);
            }
            if (hasMoment) {
              return moment(this._d).format(format);
            }
            return this._d.toDateString();
        },

        /**
         * return a Moment.js object of the current selection (if available)
         */
        getMoment: function()
        {
            return hasMoment ? moment(this._d) : null;
        },

        /**
         * set the current selection from a Moment.js object (if available)
         */
        setMoment: function(date, preventOnSelect)
        {
            if (hasMoment && moment.isMoment(date)) {
                this.setDate(date.toDate(), preventOnSelect);
            }
        },

        /**
         * return a Date object of the current selection
         */
        getDate: function()
        {
            return isDate(this._d) ? new Date(this._d.getTime()) : null;
        },

        /**
         * set the current selection
         */
        setDate: function(date, preventOnSelect)
        {
            if (!date) {
                this._d = null;

                if (this._o.field) {
                    this._o.field.value = '';
                    fireEvent(this._o.field, 'change', { firedBy: this });
                }

                return this.draw();
            }
            if (typeof date === 'string') {
                date = new Date(Date.parse(date));
            }
            if (!isDate(date)) {
                return;
            }

            var min = this._o.minDate,
                max = this._o.maxDate;

            if (isDate(min) && date < min) {
                date = min;
            } else if (isDate(max) && date > max) {
                date = max;
            }

            this._d = new Date(date.getTime());
            setToStartOfDay(this._d);
            this.gotoDate(this._d);

            if (this._o.field) {
                this._o.field.value = this.toString();
                fireEvent(this._o.field, 'change', { firedBy: this });
            }
            if (!preventOnSelect && typeof this._o.onSelect === 'function') {
                this._o.onSelect.call(this, this.getDate());
            }
        },

        /**
         * change view to a specific date
         */
        gotoDate: function(date)
        {
            var newCalendar = true;

            if (!isDate(date)) {
                return;
            }

            if (this.calendars) {
                var firstVisibleDate = new Date(this.calendars[0].year, this.calendars[0].month, 1),
                    lastVisibleDate = new Date(this.calendars[this.calendars.length-1].year, this.calendars[this.calendars.length-1].month, 1),
                    visibleDate = date.getTime();
                // get the end of the month
                lastVisibleDate.setMonth(lastVisibleDate.getMonth()+1);
                lastVisibleDate.setDate(lastVisibleDate.getDate()-1);
                newCalendar = (visibleDate < firstVisibleDate.getTime() || lastVisibleDate.getTime() < visibleDate);
            }

            if (newCalendar) {
                this.calendars = [{
                    month: date.getMonth(),
                    year: date.getFullYear()
                }];
                if (this._o.mainCalendar === 'right') {
                    this.calendars[0].month += 1 - this._o.numberOfMonths;
                }
            }

            this.adjustCalendars();
        },

        adjustDate: function(sign, days) {

            var day = this.getDate() || new Date();
            var difference = parseInt(days)*24*60*60*1000;

            var newDay;

            if (sign === 'add') {
                newDay = new Date(day.valueOf() + difference);
            } else if (sign === 'subtract') {
                newDay = new Date(day.valueOf() - difference);
            }

            this.setDate(newDay);
        },

        adjustCalendars: function() {
            this.calendars[0] = adjustCalendar(this.calendars[0]);
            for (var c = 1; c < this._o.numberOfMonths; c++) {
                this.calendars[c] = adjustCalendar({
                    month: this.calendars[0].month + c,
                    year: this.calendars[0].year
                });
            }
            this.draw();
        },

        gotoToday: function()
        {
            this.gotoDate(new Date());
        },

        /**
         * change view to a specific month (zero-index, e.g. 0: January)
         */
        gotoMonth: function(month)
        {
            if (!isNaN(month)) {
                this.calendars[0].month = parseInt(month, 10);
                this.adjustCalendars();
            }
        },

        nextMonth: function()
        {
            this.calendars[0].month++;
            this.adjustCalendars();
        },

        prevMonth: function()
        {
            this.calendars[0].month--;
            this.adjustCalendars();
        },

        /**
         * change view to a specific full year (e.g. "2012")
         */
        gotoYear: function(year)
        {
            if (!isNaN(year)) {
                this.calendars[0].year = parseInt(year, 10);
                this.adjustCalendars();
            }
        },

        /**
         * change the minDate
         */
        setMinDate: function(value)
        {
            if(value instanceof Date) {
                setToStartOfDay(value);
                this._o.minDate = value;
                this._o.minYear  = value.getFullYear();
                this._o.minMonth = value.getMonth();
            } else {
                this._o.minDate = defaults.minDate;
                this._o.minYear  = defaults.minYear;
                this._o.minMonth = defaults.minMonth;
                this._o.startRange = defaults.startRange;
            }

            this.draw();
        },

        /**
         * change the maxDate
         */
        setMaxDate: function(value)
        {
            if(value instanceof Date) {
                setToStartOfDay(value);
                this._o.maxDate = value;
                this._o.maxYear = value.getFullYear();
                this._o.maxMonth = value.getMonth();
            } else {
                this._o.maxDate = defaults.maxDate;
                this._o.maxYear = defaults.maxYear;
                this._o.maxMonth = defaults.maxMonth;
                this._o.endRange = defaults.endRange;
            }

            this.draw();
        },

        setStartRange: function(value)
        {
            this._o.startRange = value;
        },

        setEndRange: function(value)
        {
            this._o.endRange = value;
        },

        /**
         * refresh the HTML
         */
        draw: function(force)
        {
            if (!this._v && !force) {
                return;
            }
            var opts = this._o,
                minYear = opts.minYear,
                maxYear = opts.maxYear,
                minMonth = opts.minMonth,
                maxMonth = opts.maxMonth,
                html = '',
                randId;

            if (this._y <= minYear) {
                this._y = minYear;
                if (!isNaN(minMonth) && this._m < minMonth) {
                    this._m = minMonth;
                }
            }
            if (this._y >= maxYear) {
                this._y = maxYear;
                if (!isNaN(maxMonth) && this._m > maxMonth) {
                    this._m = maxMonth;
                }
            }

            randId = 'pika-title-' + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 2);

            for (var c = 0; c < opts.numberOfMonths; c++) {
                html += '<div class="pika-lendar">' + renderTitle(this, c, this.calendars[c].year, this.calendars[c].month, this.calendars[0].year, randId) + this.render(this.calendars[c].year, this.calendars[c].month, randId) + '</div>';
            }

            this.el.innerHTML = html;

            if (opts.bound) {
                if(opts.field.type !== 'hidden') {
                    sto(function() {
                        opts.trigger.focus();
                    }, 1);
                }
            }

            if (typeof this._o.onDraw === 'function') {
                this._o.onDraw(this);
            }

            if (opts.bound) {
                // let the screen reader user know to use arrow keys
                opts.field.setAttribute('aria-label', opts.ariaLabel);
            }
        },

        adjustPosition: function()
        {
            var field, pEl, width, height, viewportWidth, viewportHeight, scrollTop, left, top, clientRect, leftAligned, bottomAligned;

            if (this._o.container) return;

            this.el.style.position = 'absolute';

            field = this._o.trigger;
            pEl = field;
            width = this.el.offsetWidth;
            height = this.el.offsetHeight;
            viewportWidth = window.innerWidth || document.documentElement.clientWidth;
            viewportHeight = window.innerHeight || document.documentElement.clientHeight;
            scrollTop = window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop;
            leftAligned = true;
            bottomAligned = true;

            if (typeof field.getBoundingClientRect === 'function') {
                clientRect = field.getBoundingClientRect();
                left = clientRect.left + window.pageXOffset;
                top = clientRect.bottom + window.pageYOffset;
            } else {
                left = pEl.offsetLeft;
                top  = pEl.offsetTop + pEl.offsetHeight;
                while((pEl = pEl.offsetParent)) {
                    left += pEl.offsetLeft;
                    top  += pEl.offsetTop;
                }
            }

            // default position is bottom & left
            if ((this._o.reposition && left + width > viewportWidth) ||
                (
                    this._o.position.indexOf('right') > -1 &&
                    left - width + field.offsetWidth > 0
                )
            ) {
                left = left - width + field.offsetWidth;
                leftAligned = false;
            }
            if ((this._o.reposition && top + height > viewportHeight + scrollTop) ||
                (
                    this._o.position.indexOf('top') > -1 &&
                    top - height - field.offsetHeight > 0
                )
            ) {
                top = top - height - field.offsetHeight;
                bottomAligned = false;
            }

            this.el.style.left = left + 'px';
            this.el.style.top = top + 'px';

            addClass(this.el, leftAligned ? 'left-aligned' : 'right-aligned');
            addClass(this.el, bottomAligned ? 'bottom-aligned' : 'top-aligned');
            removeClass(this.el, !leftAligned ? 'left-aligned' : 'right-aligned');
            removeClass(this.el, !bottomAligned ? 'bottom-aligned' : 'top-aligned');
        },

        /**
         * render HTML for a particular month
         */
        render: function(year, month, randId)
        {
            var opts   = this._o,
                now    = new Date(),
                days   = getDaysInMonth(year, month),
                before = new Date(year, month, 1).getDay(),
                data   = [],
                row    = [];
            setToStartOfDay(now);
            if (opts.firstDay > 0) {
                before -= opts.firstDay;
                if (before < 0) {
                    before += 7;
                }
            }
            var previousMonth = month === 0 ? 11 : month - 1,
                nextMonth = month === 11 ? 0 : month + 1,
                yearOfPreviousMonth = month === 0 ? year - 1 : year,
                yearOfNextMonth = month === 11 ? year + 1 : year,
                daysInPreviousMonth = getDaysInMonth(yearOfPreviousMonth, previousMonth);
            var cells = days + before,
                after = cells;
            while(after > 7) {
                after -= 7;
            }
            cells += 7 - after;
            var isWeekSelected = false;
            for (var i = 0, r = 0; i < cells; i++)
            {
                var day = new Date(year, month, 1 + (i - before)),
                    isSelected = isDate(this._d) ? compareDates(day, this._d) : false,
                    isToday = compareDates(day, now),
                    hasEvent = opts.events.indexOf(day.toDateString()) !== -1 ? true : false,
                    isEmpty = i < before || i >= (days + before),
                    dayNumber = 1 + (i - before),
                    monthNumber = month,
                    yearNumber = year,
                    isStartRange = opts.startRange && compareDates(opts.startRange, day),
                    isEndRange = opts.endRange && compareDates(opts.endRange, day),
                    isInRange = opts.startRange && opts.endRange && opts.startRange < day && day < opts.endRange,
                    isDisabled = (opts.minDate && day < opts.minDate) ||
                                 (opts.maxDate && day > opts.maxDate) ||
                                 (opts.disableWeekends && isWeekend(day)) ||
                                 (opts.disableDayFn && opts.disableDayFn(day));

                if (isEmpty) {
                    if (i < before) {
                        dayNumber = daysInPreviousMonth + dayNumber;
                        monthNumber = previousMonth;
                        yearNumber = yearOfPreviousMonth;
                    } else {
                        dayNumber = dayNumber - days;
                        monthNumber = nextMonth;
                        yearNumber = yearOfNextMonth;
                    }
                }

                var dayConfig = {
                        day: dayNumber,
                        month: monthNumber,
                        year: yearNumber,
                        hasEvent: hasEvent,
                        isSelected: isSelected,
                        isToday: isToday,
                        isDisabled: isDisabled,
                        isEmpty: isEmpty,
                        isStartRange: isStartRange,
                        isEndRange: isEndRange,
                        isInRange: isInRange,
                        showDaysInNextAndPreviousMonths: opts.showDaysInNextAndPreviousMonths,
                        enableSelectionDaysInNextAndPreviousMonths: opts.enableSelectionDaysInNextAndPreviousMonths
                    };

                if (opts.pickWholeWeek && isSelected) {
                    isWeekSelected = true;
                }

                row.push(renderDay(dayConfig));

                if (++r === 7) {
                    if (opts.showWeekNumber) {
                        row.unshift(renderWeek(i - before, month, year));
                    }
                    data.push(renderRow(row, opts.isRTL, opts.pickWholeWeek, isWeekSelected));
                    row = [];
                    r = 0;
                    isWeekSelected = false;
                }
            }
            return renderTable(opts, data, randId);
        },

        isVisible: function()
        {
            return this._v;
        },

        show: function()
        {
            if (!this.isVisible()) {
                this._v = true;
                this.draw();
                removeClass(this.el, 'is-hidden');
                if (this._o.bound) {
                    addEvent(document, 'click', this._onClick);
                    this.adjustPosition();
                }
                if (typeof this._o.onOpen === 'function') {
                    this._o.onOpen.call(this);
                }
            }
        },

        hide: function()
        {
            var v = this._v;
            if (v !== false) {
                if (this._o.bound) {
                    removeEvent(document, 'click', this._onClick);
                }
                this.el.style.position = 'static'; // reset
                this.el.style.left = 'auto';
                this.el.style.top = 'auto';
                addClass(this.el, 'is-hidden');
                this._v = false;
                if (v !== undefined && typeof this._o.onClose === 'function') {
                    this._o.onClose.call(this);
                }
            }
        },

        /**
         * GAME OVER
         */
        destroy: function()
        {
            var opts = this._o;

            this.hide();
            removeEvent(this.el, 'mousedown', this._onMouseDown, true);
            removeEvent(this.el, 'touchend', this._onMouseDown, true);
            removeEvent(this.el, 'change', this._onChange);
            if (opts.keyboardInput) {
                removeEvent(document, 'keydown', this._onKeyChange);
            }
            if (opts.field) {
                removeEvent(opts.field, 'change', this._onInputChange);
                if (opts.bound) {
                    removeEvent(opts.trigger, 'click', this._onInputClick);
                    removeEvent(opts.trigger, 'focus', this._onInputFocus);
                    removeEvent(opts.trigger, 'blur', this._onInputBlur);
                }
            }
            if (this.el.parentNode) {
                this.el.parentNode.removeChild(this.el);
            }
        }

    };

    return Pikaday;
}));

NSMain = (function() {
  var instance = {};

  instance.constructor = null;

  /** @type {Constants} */
  instance.Constants = {};

  /** @type {MiscFunctions} */
  instance.MiscFunctions = {};

  /** @type {Toast} */
  instance.Toast = {};

  /** @type {Spinner} */
  instance.Spinner = {};

  /** @type {GrayOut} */
  instance.GrayOut = {};

  /** @type {BlockUI} */
  instance.BlockUI = {};

  /** @type {PopupWindow} */
  instance.PopupWindow = {};

  /** @type {Users} */
  instance.Users = {};

  /** @type {WindowLoad} */
  instance.WindowLoad = {};

  instance.init = function() {
    instance.Constants = Constants;
    instance.MiscFunctions = MiscFunctions;
    instance.Toast = Toast.getInstance(instance);
    instance.Spinner = Spinner.getInstance(instance);
    instance.GrayOut = GrayOut.getInstance(instance);
    instance.BlockUI = BlockUI.getInstance(instance);
    instance.PopupWindow = PopupWindow.getInstance(instance);
    instance.Users = Users.getInstance(instance);
    instance.WindowLoad = WindowLoad.getInstance(instance);
  }

  return instance;
})();

BlockUI = (function() {
  function BlockUI(params) {

    /* Dependencies */
    var _Spinner = params.Spinner;
    var _GrayOut = params.GrayOut;

    var self = this;

    /*
     * Setting the constructor to null to prevent a new object creation by calling
     * the constructor of the instance. This is needed to make the instance strictly
     * a singleton.
     */
    self.constructor = null;

    /* Private Variables */

    var _hideDelay = 0;

    /**
     * @param  {Number} [minDuration] Minimum duration to show the spinner, in milliseconds.
     *                                It is shown indefinitely by default.
     */
    self.block = function(minDuration) {
      if (minDuration !== undefined) {
        _hideDelay = minDuration;
        setTimeout(function() {
          _hideDelay = 0;
        }, minDuration);
      }
      _Spinner.show();
      _GrayOut.showGrayOut();
    }

    self.unblock = function() {
      setTimeout(function() {
        _Spinner.hide();
        _GrayOut.hideGrayOut();
      }, _hideDelay);
    }
  }

  /** @type {BlockUI} */
  var _instance = null;

  return {
    getInstance: function(params) {
      if (_instance === null) {
        _instance = new BlockUI(params);
      }
      return _instance;
    }
  };
})();

Constants = {
  siteUrl: 'http://sharepoint.com/SiteName/',
  pageTitle: "Inventory",
  itemsListName: "Inventory",
  auditTrailListName: "InventoryAuditTrail",
  toastShort: 1500,
  toastMedium: 2500,
  toastLong: 4000,
  fadeDuration: 500,
  defaultTime: "1900-01-01T00:00:00Z",
  Ids: {
    toast: "#toast-wrapper",
    scrollableTable: ".scrollable-table",
    underlined: ".underlined"
  }
}

Object.freeze(Constants);

MiscFunctions = (function() {

  function updateTitle(title) {
    document.title = title;
  }

  function adjustShadows() {
    var shadow = $(".shadow");
    shadow.each(function() {
      var currentShadow = $(this);
      if (currentShadow.is("tr")) {
        currentShadow.find('th').attr('colspan', currentShadow.parent().find("tr:first-child th").length);
      }
    });
  }

  function preparePlaceholders() {

    var fontFamily = $('html').css('font-family');

    $(function() {
      $('html').on('focus', '[placeholder]', function() {
        var input = $(this);
        if (input.val() === input.attr('placeholder')) {
          input.val('');
          input.removeClass('placeholder');
          input.css('color', '#1C4D6F');
          input.css('font-family', fontFamily);
        }
      });

      $('html').on('blur', '[placeholder]', function() {
        var input = $(this);
        if (input.val() === '' || input.val() === input.attr('placeholder')) {
          input.addClass('placeholder');
          input.val(input.attr('placeholder'));
          input.css('color', '#aaaaaa');
          input.css('font-family', fontFamily);
        } else {
          input.css('color', '#1C4D6F');
          input.css('font-family', fontFamily);
        }
      });
    });

    $('[placeholder]').blur();
  }

  /**
   * @description This method disables all form submit buttons. This needs to be used
   * to prevent default SharePoint WebPart form submit when 'Enter' key is pressed in
   * any of the inputs in the page.
   */
  function disableSPFormSubmits() {
    $("input[type=submit]").attr('disabled', 'disabled');
  }

  /**
   * @description   Briefly shakes the jQuery element left and right
   * @param  {Object}   element     jQuery object for the HTML element
   * @param  {Function} [callback]  Callback function
   */
  function shakeElement(element, callback) {
    var l = 20;
    var duration = 50;
    var max = 10;

    for (var i = 0; i <= max; i++) {
      element.animate({
        'margin-left': '+=' + (l = -l) + 'px',
        'margin-right': '-=' + l + 'px'
      }, duration, resetMargins);
    }

    setTimeout(function() {
      if (callback !== undefined) {
        callback();
      }
    }, duration * max);

    function resetMargins() {
      element.css({
        'margin-left': '0px'
      });
      element.css({
        'margin-right': '0px'
      });
    }
  }

  /**
   * @description Replaces special characters with HTML safe codes
   */
  function escapeHtml(string) {
    var entityMap = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;',
      '/': '&#x2F;',
      '`': '&#x60;',
      '=': '&#x3D;'
    };

    return String(string).replace(/[&<>"'`=\/]/g, function(s) {
      return entityMap[s];
    });
  }

  function datetime(string) {
    var datetime = new Date(string);
    var returnDate = "N/A";

    if (datetime !== "Invalid Date" && !isNaN(datetime)) {
      var timezone = datetime.toLocaleTimeString('en-us', {
        timeZoneName: 'short'
      }).split(' ')[2];

      var returnDate = String.format("{0:yyyy}", datetime) + "-";
      returnDate += String.format("{0:MM}", datetime) + "-";
      returnDate += String.format("{0:dd}", datetime) + " ";
      returnDate += String.format("{0:T}", datetime) + " ";
      returnDate += timezone;
    }

    return returnDate;
  }

  /**
   * @description Converts the provided string into date with the format "DD MMM YYYY".
   *              If the string cannot be converted into a valid date, 'N/A' string is returned.
   * @param  {String} string Date string
   * @return {String}        Either date in format "DD MMM YYYY, or "N/A" string is returned
   */
  function date(string) {
    var datetime = new Date(string);
    var returnDate = "N/A";

    if (datetime !== "Invalid Date" && !isNaN(datetime)) {
      datetime = datetime.fixUTCDateOffset();
      var day = datetime.getDate();

      returnDate = day < 10 ? "0" + day : day;
      returnDate += " " + datetime.getMonthNameShort() + " ";
      returnDate += datetime.getFullYear();
    }

    return returnDate;
  }

  var pikaday = {
    objects: [],
    init: function() {
      var self = this;
      var currentObj = {};
      self.objects = [];

      $('.datepicker').each(function() {
        currentObj = new Pikaday({
          field: $(this).find('input')[0],
          defaultDate: "DD MMM YYYY", // Need to set this to prevent date format change in inputs
          onSelect: function(date) {
            var year = date.getFullYear();
            var month = date.getMonthNameShort();
            var day = date.getDate();
            day = day < 10 ? "0" + day : day;

            var formattedDate = day + " " + month + " " + year;
            this._o.field.value = formattedDate;

            var itemId = this._o.field.parentElement.parentElement.id;
            var fieldName = $(this._o.field.parentElement.outerHTML).attr("field-name");
            var input = $("#" + itemId).find("td[field-name='" + fieldName + "']").find("input");
            input.val(formattedDate);
          }
        });

        self.objects.push(currentObj);
      });
    },
    getObjects: function() {
      return this.objects;
    }
  }

  function isDate(value) {
    var datetime = new Date(value);
    if (datetime === "Invalid Date" || isNaN(datetime) || datetime.getFullYear().toString().length !== 4) {
      // Checking if entered value is in European format
      // Separators aren't important as parseDate method uses regular expression to extract numbers
      var parsedDate = new Date(parseDate(value, "dd/mm/yyyy"));
      if (parsedDate === "Invalid Date" || isNaN(parsedDate) || parsedDate.getFullYear().toString().length !== 4) {
        return false;
      } else {
        return true;
      }
    } else {
      return true;
    }
  }

  // Reference: https://stackoverflow.com/a/2945150/1004334
  function parseDate(input, format) {
    format = format || 'yyyy-mm-dd'; // default format
    var parts = input.match(/(\d+)/g),
      i = 0,
      fmt = {};
    // extract date-part indexes from the format
    format.replace(/(yyyy|dd|mm)/g, function(part) {
      fmt[part] = i++;
    });
    var returnDate = "";

    try {
      returnDate = new Date(parts[fmt['yyyy']], parts[fmt['mm']] - 1, parts[fmt['dd']]);
    } catch (error) {
      returnDate = false;
      CLog.catch("MiscFunctions.parseDate", error);
    }
    return returnDate;
  }

  // Reference: https://stackoverflow.com/a/1184359/1004334
  function daysInMonth(month, year) {
    return new Date(year, month, 0).getDate();
  }

  return {
    updateTitle: updateTitle,
    adjustShadows: adjustShadows,
    preparePlaceholders: preparePlaceholders,
    disableSPFormSubmits: disableSPFormSubmits,
    shakeElement: shakeElement,
    escapeHtml: escapeHtml,
    date: date,
    datetime: datetime,
    pikaday: pikaday,
    isDate: isDate,
    daysInMonth: daysInMonth
  }
})();

PopupWindow = (function() {
  function PopupWindow(params) {

    /* Dependencies */
    var _Constants = params.Constants;
    var _GrayOut = params.GrayOut;

    var self = this;

    /*
     * Setting the constructor to null to prevent a new object creation by calling
     * the constructor of the instance. This is needed to make the instance strictly
     * a singleton.
     */
    self.constructor = null;

    /* Private Variables */
    var _fadeDuration = _Constants.fadeDuration;

    var _s = {};
    _s.Ids = {
      popupWindow: "#popup-window",
      mainWrapper: "#popup-window-main-content-wrapper",
      closeButton: "#close-popup-button",
      title: "#popup-window-title"
    }

    var _popupWindow;

    /*-------------------------------------- Private Functions --------------------------------------*/
    /*↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓*/

    var _listeners = {
      closePopupWindowButtonClickListener: function() {
        $("body").on("click", _s.Ids.popupWindow + " " + _s.Ids.closeButton, function(e) {
          self.hide();
        });
      },
      closePopupWindowListener: function() {
        $("body").on("click", function(e) {
          if (e.target.id === _GrayOut.id() &&
            $(_s.Ids.popupWindow).is(":visible")) {
            self.hide();
          }
        });
      },
      init: function() {
        this.closePopupWindowButtonClickListener();
        this.closePopupWindowListener();
      }
    }


    /*-------------------------------------- Public Functions ---------------------------------------*/
    /*↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓*/

    /**
     * @param  {String}   options.content     HTML content to be placed inside the popup window
     * @param  {String}   options.title     Popup window title
     * @param  {Number}   [options.width]     Width of the popup window in percentage. Default is 70% of the window width
     * @param  {Number}   [options.height]    Width of the popup window in percentage. Default is 60% of the window height
     */
    self.show = function(options) {
      _popupWindow = $(_s.Ids.popupWindow);

      if (options !== undefined && options.content !== "" && options.content !== undefined) {
        options.title = options.title !== undefined ? options.title : "Popup Window";

        $(_s.Ids.mainWrapper).html(options.content);
        $(_s.Ids.title).html(options.title);

        if (options.width !== undefined) {
          _popupWindow.css("width", options.width + "vw");
          _popupWindow.css("left", (100 - options.width) / 2 + "vw");
        }

        if (options.height !== undefined) {
          _popupWindow.css("height", options.height + "vh");
          _popupWindow.css("top", (100 - options.height) / 3 + "vh");
        }

        _popupWindow.fadeIn(_fadeDuration);
        _GrayOut.showGrayOut(true);
      }
    }

    self.hide = function() {
      _popupWindow.fadeOut(_fadeDuration).promise().done(function() {
        $(_s.Ids.mainWrapper).html("");
      });
      _GrayOut.keepVisible(false);
      _GrayOut.hideGrayOut();
    }

    self.isVisible = function() {
      _popupWindow = $(_s.Ids.popupWindow);
      return _popupWindow.is(":visible");
    }

    init();

    function init() {
      _listeners.init();
    }
  }

  /** @type {PopupWindow} */
  var _instance = null;

  return {
    getInstance: function(params) {
      if (_instance === null) {
        _instance = new PopupWindow(params);
      }
      return _instance;
    }
  };
})();

Toast = (function() {
  function Toast(params) {

    /* Dependencies */
    var _Constants = params.Constants;
    var _MiscFunctions = params.MiscFunctions;

    var self = this;

    /*
     * Setting the constructor to null to prevent a new object creation by calling
     * the constructor of the instance. This is needed to make the instance strictly
     * a singleton.
     */
    self.constructor = null;

    /* Private Variables */

    var _s = {};
    _s.Ids = {
      toast: "#toast-wrapper"
    }

    var _fadeDuration = _Constants.fadeDuration;

    var _toastWrapper = "";

    var _toastFadeTimeout = "";

    var _shakeInProgress = false;

    /*-------------------------------------- Public Functions ---------------------------------------*/
    /*↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓*/

    /**
     * @type {Object}     options
     * @type {String}     options.message       Test to show in toast window
     * @type {String}     [options.duration]    Duration in milliseconds. If duration is not provided, default is 4000 (_Constants.toastLong).
     *                                          Pass '0' to show the toast message indefinitely.
     * @type {Boolean}    [options.shake]       Toast is shaked if true
     * @type {Function}   [options.callback]    Callback function. Called only if duration is duration is not 0.
     */
    self.showToast = function(options) {
      _toastWrapper = $(_s.Ids.toast);
      if ((options !== undefined || !options.message.length) && !_shakeInProgress) {
        options.duration = options.duration !== undefined ? options.duration : _Constants.toastLong;
        options.shake = options.shake !== undefined ? options.shake : false;

        _toastWrapper.html(options.message);
        _toastWrapper.fadeIn(_fadeDuration);

        if (options.shake) {
          _shakeInProgress = true;
          _MiscFunctions.shakeElement(_toastWrapper, function() {
            _shakeInProgress = false;
          });
        }

        clearTimeout(_toastFadeTimeout);
        if (options.duration !== 0) {
          _toastFadeTimeout = setTimeout(
            function() {
              self.hideToast(options.callback);
            }, options.duration);
        }
      }
    }

    /**
     * @type {Function} [callback] Callback function
     */
    self.hideToast = function(callback) {
      _toastWrapper = $(_s.Ids.toast);
      clearTimeout(_toastFadeTimeout);
      _toastWrapper.fadeOut(_fadeDuration, function() {
        _toastWrapper.html("");
        if (callback !== undefined) {
          callback();
        }
      });
    }

    /**
     * @description Getter for gray out div id
     * @return {String} Gray out div id
     */
    self.id = function() {
      return _s.Ids.toast;
    }
  }

  /** @type {Toast} */
  var _instance = null;

  return {
    getInstance: function(params) {
      if (_instance === null) {
        _instance = new Toast(params);
      }
      return _instance;
    }
  };
})();

Users = (function() {
  function Users(params) {

    /* Dependencies */
    var _Constants = params.Constants;

    var self = this;

    /*
     * Setting the constructor to null to prevent a new object creation by calling
     * the constructor of the instance. This is needed to make the instance strictly
     * a singleton.
     */
    self.constructor = null;

    /* Private Variables */
    var _currentUserId = "";
    var _currentUser = "";
    var _currentUserName = "";

    self.get_currentUserId = function() {
      var apiBaseUrl = "/_api/web/CurrentUser?$select=Id";

      $.ajax({
        url: Constants.siteUrl + apiBaseUrl,
        method: "GET",
        headers: {
          "Accept": "application/json; odata=verbose"
        },
        success: function(data) {
          _currentUserId = data.d.Id;
          self.getUser(_currentUserId);
        },
        error: function(data) {
          CLog.e("Users.get_currentUserId", 'request failed ' + data);
        }
      });
    }

    self.getCurrentUsername = function() {
      return _currentUserName;
    }

    self.getCurrentUserId = function() {
      return _currentUserId;
    }

    self.getUser = function(userid) {
      $.ajax({
        url: Constants.siteUrl + "/_api/web/getuserbyid(" + userid + ")",
        method: "GET",
        headers: {
          "Accept": "application/json; odata=verbose"
        },
        success: function(data) {
          _currentUser = data.d;
          _currentUserName = data.d.Title;
        },
        error: function(data) {
          CLog.e("Users.get_currentUserId", 'request failed ' + data);
        }
      });
    }

    self.init = function() {
      self.get_currentUserId();
      self.getCurrentUsername();
    }
  }

  /** @type {Users} */
  var _instance = null;

  return {
    getInstance: function(params) {
      if (_instance === null) {
        _instance = new Users(params);
      }
      return _instance;
    }
  };
})();

WindowLoad = (function() {
  function WindowLoad(params) {

    /* Dependencies */
    var _Toast = params.Toast;
    var _MiscFunctions = params.MiscFunctions;

    var self = this;

    /*
     * Setting the constructor to null to prevent a new object creation by calling
     * the constructor of the instance. This is needed to make the instance strictly
     * a singleton.
     */
    self.constructor = null;

    /* Private Variables */

    self.webPartsLoaded = function(callback) {
      var currentCall = 0;
      var loadedInterval = setInterval(function() {
        currentCall++;
        if ($(_Toast.id()).length) {
          clearInterval(loadedInterval);
          callback();
        } else if (currentCall === 100) {
          clearInterval(loadedInterval);
          alert("Oops, something went wrong.</br>Please try refreshing page or clearing your browser caches. If that doesn't resolve the issue, please contact your system administrator.");
        }
      }, 200);
    }
  }

  /** @type {WindowLoad} */
  var _instance = null;

  return {
    getInstance: function(params) {
      if (_instance === null) {
        _instance = new WindowLoad(params);
      }
      return _instance;
    }
  };
})();

GrayOut = (function() {
  function GrayOut(params) {

    var self = this;

    /*
     * Setting the constructor to null to prevent a new object creation by calling
     * the constructor of the instance. This is needed to make the instance strictly
     * a singleton.
     */
    self.constructor = null;

    /* Private Variables */

    var _s = {};
    _s.Ids = {
      grayOut: "#gray-out-div"
    }

    var _fadeDuration = 200;
    var _keepVisible = false;

    self.showGrayOut = function(status) {
      if (status === true) {
        _keepVisible = status;
      }
      $(_s.Ids.grayOut).fadeIn(_fadeDuration);
    }

    self.hideGrayOut = function() {
      if (!_keepVisible) {
        $(_s.Ids.grayOut).fadeOut(_fadeDuration);
      }
    }

    self.keepVisible = function(status) {
      _keepVisible = status;
    }

    /**
     * @description Getter for gray out div id
     * @return {String} Gray out div id
     */
    self.id = function() {
      return _s.Ids.grayOut.substr(1);
    }
  }

  /** @type {GrayOut} */
  var _instance = null;

  return {
    getInstance: function(params) {
      if (_instance === null) {
        _instance = new GrayOut(params);
      }
      return _instance;
    }
  };
})();

Spinner = (function() {
  function Spinner(params) {
    var self = this;

    /*
     * Setting the constructor to null to prevent a new object creation by calling
     * the constructor of the instance. This is needed to make the instance strictly
     * a singleton.
     */
    self.constructor = null;

    /* Private Variables */

    var _s = {};
    _s.Ids = {
      spinner: "#spinner"
    }

    var _fadeDuration = 200;

    self.show = function() {
      $(_s.Ids.spinner).fadeIn(_fadeDuration);

    }

    self.hide = function() {
      $(_s.Ids.spinner).fadeOut(_fadeDuration);

    }
  }

  /** @type {Spinner} */
  var _instance = null;

  return {
    getInstance: function(params) {
      if (_instance === null) {
        _instance = new Spinner(params);
      }
      return _instance;
    }
  };
})();

NSItems = (function() {
  var instance = {};

  instance.constructor = null;

  /** @type {NewItem} */
  instance.NewItem = {};

  /** @type {ItemUpdates} */
  instance.ItemUpdates = {};

  /** @type {InventoryTable} */
  instance.InventoryTable = {};

  /** @type {Search} */
  instance.Search = {};

  /** @type {AuditTrail} */
  instance.AuditTrail = {};

  /** @type {Sort} */
  instance.Sort = {};

  /** @type {Filter} */
  instance.Filter = {};

  /** @type {DeleteItem} */
  instance.DeleteItem = {};

  instance.settings = {
    toastDuration: "", // Assigned in 'init' function
    fields: ["ID", "Name", "Notebook", "StorageAssetID", "RackNo", "BoxNo", "Analyst", "Date", "Quantity", "Notes"] // These field names have to match the SharePoint list field IDs (not the display names)
  }

  instance.init = function() {
    instance.settings.toastDuration = NSMain.Constants.toastShort;
    instance.AuditTrail = AuditTrail.getInstance(instance);
    instance.Search = Search.getInstance(instance);
    instance.Sort = Sort.getInstance(instance);
    instance.Filter = Filter.getInstance(instance);
    instance.InventoryTable = InventoryTable.getInstance(instance);
    instance.DeleteItem = DeleteItem.getInstance(instance);
    instance.NewItem = NewItem.getInstance(instance);
    instance.ItemUpdates = ItemUpdates.getInstance(instance);
    solveCircularDependencies();

    NSItems.InventoryTable.populateTable();
    NSItems.Search.init();
    NSItems.NewItem.init();
    NSItems.InventoryTable.init();
    NSItems.ItemUpdates.init();
  }

  function solveCircularDependencies() {
    instance.Search.solveCircularDependencies({
      NewItem: instance.NewItem,
      InventoryTable: instance.InventoryTable
    });

    instance.InventoryTable.solveCircularDependencies({
      NewItem: instance.NewItem,
      ItemUpdates: instance.ItemUpdates,
      DeleteItem: instance.DeleteItem
    });

    instance.Sort.solveCircularDependencies({
      InventoryTable: instance.InventoryTable
    });

    instance.Filter.solveCircularDependencies({
      InventoryTable: instance.InventoryTable
    });
  }

  return instance;
})();

AuditTrail = (function() {
  function AuditTrail(params) {

    /* Dependencies */
    var _Constants = NSMain.Constants;
    var _PopupWindow = NSMain.PopupWindow;
    var _MiscFunctions = NSMain.MiscFunctions;
    var _Users = NSMain.Users;

    var self = this;

    /*
     * Setting the constructor to null to prevent a new object creation by calling
     * the constructor of the instance. This is needed to make the instance strictly
     * a singleton.
     */
    self.constructor = null;

    /* Private Variables */
    var _listId = "";

    var _itemId = "";

    var _fields = {
      "ID": "text",
      "ItemID": "text",
      "Changes": "text",
      "eLN": "text",
      "Created": "datetime",
      "User": "person_lookup"
    }

    var _s = {
      Ids: {
        auditTrailTable: "#audit-trail-table",
        auditTrailChangesTd: ".audit-trail-changes-td",
        auditTrailChangesText: ".audit-trail-changes-text",
        newItemTitle: "#new-item-title-text"
      }
    }

    /*-------------------------------------- Private Functions --------------------------------------*/
    /*↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓*/

    function prepAuditPopup(results) {
      var contentHtml = "<table id='" + _s.Ids.auditTrailTable.slice(1) + "' class='" + _Constants.Ids.scrollableTable.slice(1) + "'>";

      // Table head
      contentHtml += "<thead>";
      // Header cells with title texts
      contentHtml += "<tr>";
      contentHtml += "<th>Version</th>";
      contentHtml += "<th class='" + _s.Ids.auditTrailChangesTd.slice(1) + "'>Changes</th>";
      contentHtml += "<th>User</th>";
      contentHtml += "<th>Date</th>";
      contentHtml += "<th>eLN</th>";
      contentHtml += "<th></th>"; // Empty cell is needed for scrollbar
      contentHtml += "</tr>";
      // Header shadow row
      contentHtml += "<tr class='shadow'><th></th></tr>";
      contentHtml += "</thead>";

      // Table body
      contentHtml += "<tbody>";

      var version = Object.keys(results).length;

      for (var id in results) {
        if (!results.hasOwnProperty(id))
          continue;
        var changes = results[id]["Changes"];
        var eLN = results[id]["eLN"] !== null ? results[id]["eLN"] : "N/A";
        contentHtml += "<tr>";
        version--;

        // Version number
        contentHtml += "<td title='" + version + "'>";
        contentHtml += "<span>" + version + "</span>";
        contentHtml += "</td>";

        var changesHtml = "";
        var changesHintText = "";
        if (version === 0) {
          changesHtml += "<div id='" + _s.Ids.newItemTitle.slice(1) + "'>New Item</div>";
          changesHintText += "New item was added with values: ";
        }

        for (var fieldName in changes) {
          if (!changes.hasOwnProperty(fieldName))
            continue;

          changesHtml += "<div>";
          changesHtml += "<b>" + fieldName + ": </b>";

          if (version === 0) {
            changesHintText += fieldName + ": '" + changes[fieldName]["NewValue"] + "'; ";
          } else {
            changesHtml += "<span>Value changed from ";
            changesHtml += "'<span class='" + _s.Ids.auditTrailChangesText.slice(1) + "'>" + changes[fieldName]["OldValue"] + "</span>'";
            changesHtml += " to ";

            changesHintText += "Field '" + fieldName + "' was changed from '" + changes[fieldName]["OldValue"] + "' to '" + changes[fieldName]["NewValue"] + "'; ";
          }

          changesHtml += "'<span class='" + _s.Ids.auditTrailChangesText.slice(1) + "'>" + changes[fieldName]["NewValue"] + "</span>'";
          changesHtml += "</span>";
          changesHtml += "</div>";

        }

        contentHtml += "<td class='" + _s.Ids.auditTrailChangesTd.slice(1) + "' title='" + _MiscFunctions.escapeHtml(changesHintText.slice(0, -2)) + "'>";
        contentHtml += changesHtml;
        contentHtml += "</td>";

        contentHtml += "<td title='" + results[id]["User"] + "'>";
        contentHtml += "<span>" + results[id]["User"] + "</span>";
        contentHtml += "</td>";

        var dateHtml = _MiscFunctions.datetime(results[id]["Created"]);

        contentHtml += "<td title='" + dateHtml + "'>";
        contentHtml += "<span>" + dateHtml + "</span>";
        contentHtml += "</td>";

        contentHtml += "<td title='" + eLN + "'>";
        contentHtml += "<span>" + eLN + "</span>";
        contentHtml += "</td>";

        contentHtml += "</tr>";
      }

      contentHtml += "</tbody>";
      contentHtml += "</table>";

      _PopupWindow.show({
        content: contentHtml,
        title: "Audit Trail for " + _itemId,
        width: "96",
        height: "96"
      });
    }

    /*-------------------------------------- Public Functions ---------------------------------------*/
    /*↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓*/

    /**
     * @description Performs the API query to get the audit trail for a given item
     * @param  {number}   itemId                Item's ID for which the audit trail to be fetched
     * @param  {Function} [options.callback]    Callback function called when AJAX is complete
     */
    self.getAuditTrail = function(itemId, options) {
      options = options !== undefined ? options : {};
      _itemId = itemId;

      var apiBaseUrl = "_api/web/lists/getbytitle('" + _Constants.auditTrailListName + "')/items";
      var apiQueryUrl = "?$select=";

      // Might or might not be used depending on if there are any person lookup fields in _fields object
      var personLookupQuery = "*&$expand=";

      // Looping through all the fields and adding them to the query
      for (var field in _fields) {
        if (!_fields.hasOwnProperty(field))
          continue;

        if (_fields[field] === "person_lookup") {
          personLookupQuery += field + ",";
          apiQueryUrl += field + "/Title,"; // By default the user title is requested for a person lookup field
        } else {
          apiQueryUrl += field + ",";
        }
      }

      if (personLookupQuery !== "*&$expand=") { // If there is a person lookup field present, personLookupQuery would be different than its default value of "*&$expand="
        apiQueryUrl += personLookupQuery.slice(0, -1); // Removing the extra comma at the end
      } else {
        apiQueryUrl = apiQueryUrl.slice(0, -1); // Removing the extra comma at the end
      }

      apiQueryUrl += "&$filter=(ItemID eq " + itemId + ")"; // Getting the audit trail for the requested item only using its provided ID
      apiQueryUrl += "&$orderby=ID desc"; // Returning the most recent entries first

      var returnObj = {};

      $.ajax({
        url: _Constants.siteUrl + apiBaseUrl + apiQueryUrl,
        method: "GET",
        headers: {
          "Accept": "application/json; odata=verbose"
        },
        success: function(data) {
          // Iterating through all the items in returned data
          for (var id in data.d.results) {
            if (!data.d.results.hasOwnProperty(id))
              continue;

            returnObj[id] = {};
            returnObj[id]['ID'] = data.d.results[id]['ID'];
            returnObj[id]['ItemID'] = data.d.results[id]['ItemID'];
            returnObj[id]['Changes'] = JSON.parse(data.d.results[id]['Changes']);
            returnObj[id]['eLN'] = data.d.results[id]['eLN'];
            returnObj[id]['Created'] = data.d.results[id]['Created'];
            returnObj[id]['User'] = data.d.results[id]['User']['Title'];
          }

          prepAuditPopup(returnObj);
        },
        error: function(data) {
          CLog.e("AudtiTrail.getAuditTrail", data);
        }
      }).done(function() {
        if (options.callback !== undefined) {
          options.callback(returnObj);
        }
      });
    };

    /**
     * @param  {Object}   items           Object containing all the changed fields with their old and new values.
     *                                    There can be multiple items with their respected changes grouped under their respective IDs.
     *                                    Example structure:
     *                                      {
     *                                        "43": {
     *                                          "old": {
     *                                            "Name": "this is old name",
     *                                            "Notebook": "eLN Number 1234",
     *                                          },
     *                                          "new": {
     *                                            "Name": "this is new name",
     *                                            "Notebook": "eLN Number 4567",
     *                                          }
     *                                        },
     *                                        "46": {
     *                                          "old": {
     *                                            "RackNo": "1",
     *                                            "Notebook": "eLN Number 1234",
     *                                          },
     *                                          "new": {
     *                                            "RackNo": "3",
     *                                            "Notebook": "eLN Number 4567",
     *                                          }
     *                                        }
     *                                      }
     *
     * @param  {Object}   [elnReferences] Object containing eLN references for the changes. This is an optional parameter.
     *                                    Example structure:
     *                                      {
     *                                        "43": "eLN Reference 1234",
     *                                        "46": "eLN Reference 1456"
     *                                      }
     *
     * @param  {Function} [callback]      Callback function
     */
    self.updateAuditTrail = function(items, elnReferences, callback) {
      elnReferences = elnReferences !== undefined ? elnReferences : {};

      var clientContext = new SP.ClientContext(Constants.siteUrl);
      var oList = clientContext.get_web().get_lists().getByTitle(_Constants.auditTrailListName);

      // Iterating through all the items in 'items' object
      for (var id in items) {
        if (!items.hasOwnProperty(id))
          continue;

        var itemCreateInfo = new SP.ListItemCreationInformation();
        var oListItem = oList.addItem(itemCreateInfo);

        var changedFields = {};

        // Iterating through all the fields for each item (using their IDs)
        for (var field in items[id]["new"]) {
          if (!items[id]["new"].hasOwnProperty(field))
            continue;

          if (field.contains("date")) {
            items[id]["new"][field] = _MiscFunctions.date(items[id]["new"][field]);
            if (items[id]["new"][field] === _MiscFunctions.date(_Constants.defaultTime)) {
              items[id]["new"][field] = "N/A";
            }
          }

          changedFields[field] = {};
          changedFields[field]["OldValue"] = items[id]["old"][field];
          changedFields[field]["NewValue"] = items[id]["new"][field];
        }

        oListItem.set_item("ItemID", id);
        oListItem.set_item("User", _Users.getCurrentUserId());
        oListItem.set_item("Changes", JSON.stringify(changedFields));

        elnReferences[id] = elnReferences[id] !== undefined ? elnReferences[id] : "N/A";
        oListItem.set_item("eLN", elnReferences[id]);

        oListItem.update();
        clientContext.load(oListItem);
      }

      clientContext.executeQueryAsync(function() {
        if (callback !== undefined) {
          callback();
        }
      }, function(sender, args) {
        CLog.e("AuditTrail.updateAuditTrail", "Request failed. " + args.get_message() + '\n' + args.get_stackTrace());
      });
    }
  }

  /** @type {AuditTrail} */
  var _instance = null;

  return {
    getInstance: function(params) {
      if (_instance === null) {
        _instance = new AuditTrail(params);
      }
      return _instance;
    }
  };
})();

Filter = (function() {
  function Filter(params) {

    /* Dependencies */
    var _Constants = NSMain.Constants;
    var _MiscFunctions = NSMain.MiscFunctions;
    var _Toast = NSMain.Toast;
    var _InventoryTable = params.InventoryTable;
    var _Search = params.Search;
    var _s = clone(params.settings); // Do not use direct assignment, as it causes the original object (i.e. NSItems.settings) to change when anything changes in _s.

    var self = this;

    /*
     * Setting the constructor to null to prevent a new object creation by calling
     * the constructor of the instance. This is needed to make the instance strictly
     * a singleton.
     */
    self.constructor = null;

    /* Private Variables */

    var _fields = _s.fields;

    _s.Ids = {
      filterIcon: ".filter-icon",
      filterPopup: ".filter-popup",
      filterPopupHolderTr: "#filter-popup-holder-tr",
      opaque: ".opaque",
      applyFilterButton: ".apply-filter-button",
      clearFilterButton: ".clear-filter-button",
      showDeletedItemsCheckboxHolder: "#show-deleted-items-checkbox-holder",
      showDeletedItemsCheckbox: "#show-deleted-items-checkbox"
    }

    // jQuery object for inventory table thead
    _s.thead = {}; // Initialized in init function

    var _savedFields = [];
    var _savedValues = {};

    var _popupVisible = false;
    var _currentPopup = "";
    var _lastApplyClickedField = "";

    var _query = "";

    /*-------------------------------------- Private Functions --------------------------------------*/
    /*↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓*/


    var _listeners = {
      filterClickListener: function() {
        $("body").on("click", _s.Ids.filterIcon, function(e) {
          var clickedFilterFieldName = $(this).closest("th").attr("field-name");
          prepareFilterIcons();

          if (_currentPopup === clickedFilterFieldName) {
            _popup.hide(clickedFilterFieldName);
          } else {
            _popup.show(clickedFilterFieldName);
            $(this).addClass(_s.Ids.opaque.slice(1));
          }
        });
      },
      filterCheckboxChangeListener: function() {
        $(document).on("change", _s.Ids.filterPopup + " input[type='checkbox']:not(" + _s.Ids.showDeletedItemsCheckbox + ")", function(e) {
          _Toast.showToast({
            message: "Click 'Apply' to filter",
            duration: 0
          });
        });
      },
      clearFilterButtonClickListener: function() {
        $("body").on("click", _s.Ids.clearFilterButton, function(e) {
          var clickedFilterFieldName = $(this).closest(_s.Ids.filterPopup).attr("field-name");
          _lastApplyClickedField = "";
          _checkboxes.clear(clickedFilterFieldName);
        });
      },
      applyFilterButtonClickListener: function() {
        $("body").on("click", _s.Ids.applyFilterButton, function(e) {
          var clickedFilterFieldName = $(this).closest(_s.Ids.filterPopup).attr("field-name");
          _lastApplyClickedField = clickedFilterFieldName;
          _checkboxes.getCheckedItems(clickedFilterFieldName);
        });
      },
      bodyClickListener: function() {
        $("body").on("click", function(e) {
          var classList = e.target.className.split(" ");
          if (!classList.contains(_s.Ids.filterPopup.slice(1)) &&
            !classList.contains(_s.Ids.filterIcon.slice(1)) &&
            !($(e.target).closest(_s.Ids.filterPopup).length > 0) &&
            $(_s.Ids.filterPopup).is(":visible")) {
            _popup.hideAll();
            prepareFilterIcons();
          }
        });
      },
      showDeletedItemsCheckboxListener: function() {
        $(document).on("change", _s.Ids.showDeletedItemsCheckbox, function(e) {
          if ($(this).is(":checked")) {
            _Search.showDeleted(true);
          } else {
            _Search.showDeleted(false);
          }
          _InventoryTable.populateTable();
        });
      },
      init: function() {
        this.filterClickListener();
        this.filterCheckboxChangeListener();
        this.clearFilterButtonClickListener();
        this.applyFilterButtonClickListener();
        this.bodyClickListener();
        this.showDeletedItemsCheckboxListener();
      }
    }

    var _popup = {
      show: function(fieldName) {
        $(_s.Ids.filterPopupHolderTr).find(_s.Ids.filterPopup).fadeOut(_Constants.fadeDuration);
        $(_s.Ids.filterPopupHolderTr).find(_s.Ids.filterPopup + "[field-name='" + fieldName + "']").fadeIn(_Constants.fadeDuration)
          .promise().done(function() {
            _currentPopup = fieldName;
            _popupVisible = true;

            if (_currentPopup.toLowerCase() === "id") {
              if (_Search.showDeleted()) {
                $(_s.Ids.showDeletedItemsCheckbox).attr("checked", true);
              }
            }
          });
      },
      hide: function(fieldName) {
        $(_s.Ids.filterPopupHolderTr).find(_s.Ids.filterPopup + "[field-name='" + fieldName + "']").fadeOut(_Constants.fadeDuration).promise().done(function() {
          _currentPopup = "";
          _popupVisible = false;
        });
        _Toast.hideToast();
      },
      hideAll: function() {
        $(_s.Ids.filterPopupHolderTr).find(_s.Ids.filterPopup).fadeOut(_Constants.fadeDuration).promise().done(function() {
          _currentPopup = "";
          _popupVisible = false;
        });
        _Toast.hideToast();
      }
    }

    var _checkboxes = {
      prepare: function(value) {
        var html = "<div class='pretty p-default p-curve' title='" + value + "'>";
        html += "<input type='checkbox' filter-value='" + value + "'>";
        html += "<div class='state p-primary-o'>";
        html += "<label>" + value + "</label>";
        html += "</div>";
        html += "</div>";

        return html;
      },
      check: function() {
        var numOfFields = _savedFields.length;

        for (var i = 0; i < numOfFields; i++) {
          var fieldName = _savedFields[i];
          var values = _savedValues[fieldName];

          for (var key in values) {
            if (!values.hasOwnProperty(key))
              continue;
            $(document).find(_s.Ids.filterPopup + "[field-name='" + fieldName + "']").find("input[filter-value='" + values[key] + "']").prop("checked", true);;
          }
        }
      },
      clear: function(fieldName) {
        $(_s.Ids.filterPopup + "[field-name='" + fieldName + "']").find("input[type='checkbox']:not(" + _s.Ids.showDeletedItemsCheckbox + ")").prop('checked', false);
        _savedValues[fieldName] = [];
        _savedFields.remove(fieldName);
        _checkboxes.getCheckedItems(fieldName);
      },
      getCheckedItems: function(fieldName) {
        if (_savedValues[fieldName] === undefined) {
          _savedValues[fieldName] = [];
        }

        $(document).find(_s.Ids.filterPopup + "[field-name='" + fieldName + "']").find("input[type='checkbox']:not(" + _s.Ids.showDeletedItemsCheckbox + ")").each(function() {
          var value = $(this).attr('filter-value');
          var index = _savedValues[fieldName].indexOf(value);

          if ($(this).is(":checked") && !(index > -1)) {
            _savedValues[fieldName].push(value); // If checked, it is added into the values list
          } else if (!$(this).is(":checked") && index > -1) {
            _savedValues[fieldName].remove(value);
          }
        });

        if (_savedValues[fieldName].length === 0) {
          delete _savedValues[fieldName];
          _savedFields.remove(fieldName);
        } else {
          _savedFields.push(fieldName);
        }

        prepareFilterIcons();
        prepareQuery();
      }
    }

    var _filterValues = {
      init: function() {
        _s.thead.append("<tr id='" + _s.Ids.filterPopupHolderTr.slice(1) + "'></tr>");
        this.refresh();
      },
      refresh: function(excludeField) {
        var self = this;
        excludeField = excludeField !== undefined ? excludeField : _lastApplyClickedField;

        var numOfFields = _fields.length;
        for (var j = 0; j < numOfFields; j++) {
          if (_fields[j] !== excludeField) {
            self.values[_fields[j]] = []; // Resetting the arrays for all fields, except currently active field
          }
        }

        getData();

        function getData(nextQuery) {
          var options = {
            success: function(data, next) { // Using SP API __next string to query API to get all the data to populate filters properly
              if (next !== undefined) {
                getData(next); // As long as there are more items left to be retrieved (i.e. there is __next field in API response), the method is called again and again
              }
              processData(data);
            }
          }

          if (nextQuery !== undefined) {
            options.nextQuery = nextQuery;
          }

          _InventoryTable.getData(options);
        }

        function processData(data) {
          self.saveValues(data);
          $(_s.Ids.filterPopupHolderTr).html(self.prepareFilterCells());
          _checkboxes.check();
          prepareFilterIcons();
        }

        _currentPopup = "";
        _popupVisible = false;
      },
      saveValues: function(data) {
        var self = this;
        var numOfFields = _fields.length;
        var fieldName = "";

        for (var i = 0, max = data.length; i < max; i++) {
          var values = data[i];

          for (var j = 0; j < numOfFields; j++) {
            fieldName = _fields[j];

            if (self.values[fieldName] === undefined) {
              self.values[fieldName] = [];
            }

            if (!self.values[fieldName].contains(values[fieldName])) {
              self.values[fieldName].push(values[fieldName]);
            }
          }

        }

        for (var k = 0; k < numOfFields; k++) {
          fieldName = _fields[k];

          if (fieldName.toLowerCase() === "id") {
            self.values[fieldName].sortNumbers();
          } else {
            self.values[fieldName].sort();
          }
        }
      },
      prepareFilterCells: function() {
        var self = this;
        var numOfFields = _fields.length;
        var returnHtml = "";

        for (var j = 0; j < numOfFields; j++) {
          var fieldName = _fields[j];

          returnHtml += "<th>";
          returnHtml += "<div class='" + _s.Ids.filterPopup.slice(1) + "' field-name='" + fieldName + "'>";
          returnHtml += "<div>";
          returnHtml += "<a class='button " + _s.Ids.applyFilterButton.slice(1) + "'>Apply</a>";
          returnHtml += "<a class='button " + _s.Ids.clearFilterButton.slice(1) + "'>Clear</a>";
          returnHtml += "</div>";
          if (fieldName.toLowerCase() === "id") {
            var showDeletedHtml = "<div class='pretty p-default p-curve' id='" + _s.Ids.showDeletedItemsCheckboxHolder.slice(1) + "' title='Show Deleted Items'>";
            showDeletedHtml += "<input type='checkbox' id='" + _s.Ids.showDeletedItemsCheckbox.slice(1) + "' filter-value='Show Deleted Items'>";
            showDeletedHtml += "<div class='state p-primary-o'>";
            showDeletedHtml += "<label>Show Deleted Items</label>";
            showDeletedHtml += "</div>";
            showDeletedHtml += "</div>";
            returnHtml += showDeletedHtml;
          }
          returnHtml += "<ul>";

          var numOfItems = self.values[fieldName].length;
          var nullDateCheckboxAdded = false;
          for (var i = 0; i < numOfItems; i++) {
            if (fieldName.contains("date")) {
              if (self.values[fieldName][i] !== null && self.values[fieldName][i] !== _Constants.defaultTime) {
                returnHtml += "<li>" + _checkboxes.prepare(_MiscFunctions.date(self.values[fieldName][i])) + "</li>";
              } else if (!nullDateCheckboxAdded) {
                nullDateCheckboxAdded = true;
                returnHtml += "<li>" + _checkboxes.prepare("N/A") + "</li>";
              }
            } else {
              returnHtml += "<li>" + _checkboxes.prepare(self.values[fieldName][i]) + "</li>";
            }
          }

          returnHtml += "</ul>";
          returnHtml += "</div>";
          returnHtml += "</th>";
        }

        return returnHtml;
      },
      values: {}
    }

    /**
     * @description Loops through _savedFields array and sets up the filter icon's opaquenes accordingly
     */
    function prepareFilterIcons() {
      // Setting up the filter icon opacities depending on if there are any active filters
      $(_s.Ids.filterIcon).removeClass(_s.Ids.opaque.slice(1));
      var numOfSavedFields = _savedFields.length;
      for (var i = 0; i < numOfSavedFields; i++) {
        $(_s.Ids.filterIcon).closest("tr").find("th[field-name='" + _savedFields[i] + "']").find(_s.Ids.filterIcon).addClass(_s.Ids.opaque.slice(1));
      }
    }

    function prepareQuery() {
      var queryString = "";
      if (_savedFields.length !== 0) {
        queryString += "(";

        for (var fieldName in _savedValues) {
          if (!_savedValues.hasOwnProperty(fieldName))
            continue;

          var valuesArray = _savedValues[fieldName];
          var numOfValues = valuesArray.length;

          queryString += "(";
          for (var i = 0; i < numOfValues; i++) {
            if (fieldName.contains("date")) {
              if (valuesArray[i] == "N/A") {
                queryString += "(" + fieldName + " le datetime'" + _Constants.defaultTime + "') or ";
              } else {
                queryString += _Search.prepareDateQuery(valuesArray[i], fieldName);
              }
            } else {
              queryString += "(" + fieldName + " eq '" + valuesArray[i] + "') or ";
            }
          }

          queryString = queryString.slice(0, -4); // Removing the extra ' or ' at the end
          queryString += ") and ";

        }
        queryString = queryString.slice(0, -5); // Removing the extra ' and ' at the end
        queryString += ")";
      }
      _query = queryString;
      _popup.hideAll();
      _InventoryTable.populateTable();
    }

    /**
     * @description Injects all the required HTML code for filter visuals into DOM.
     */
    function initVisuals() {
      _s.thead.find("tr:first-child").find("th").find(_InventoryTable.theadTextHtmlClass()).parent().each(function() {
        var filterHtml = "<span class='" + _s.Ids.filterIcon.slice(1) + "'></span>";
        $(this).append(filterHtml);
      });
      _filterValues.init();
    }

    /*-------------------------------------- Public Functions ---------------------------------------*/
    /*↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓*/

    self.queryString = function() {
      return _query;
    }

    self.refresh = function() {
      _filterValues.refresh();
    }

    /**
     * @description     Used to handle the circular dependencies by loading the dependencies after
     *                  initial creation of an object.
     *
     *                  A single parameter must be passed as an object literal. For example:
     *
     *                      {InventoryTable: InventoryTable}
     *
     *                  If Items and Search have circular dependencies with each other,
     *                  "solveCircularDependencies" method should be called as below to solve
     *                  the circular dependency:
     *
     *                      Filter.solveCircularDependencies({
     *                          InventoryTable: InventoryTable
     *                      });
     *
     *                  this is assuming the Items object was created before Search object. If it
     *                  is the other way around, then the method should be called from Items object:
     *
     *                      InventoryTable.solveCircularDependencies({
     *                          Filter: Filter
     *                      });
     *
     *                  If there is more than one circular dependency, each dependent object
     *                  should be added as an item in the object literal parameter:
     *
     *                      Filter.solveCircularDependencies({
     *                          Search: Search,
     *                          InventoryTable: InventoryTable
     *                      });
     *
     */
    self.solveCircularDependencies = function() {
      var parameters = arguments[0];

      var variableName, value, property;

      /*
       * Below functions are used to set the local (private) variables, which have circular dependencies,
       * in the parent object. These functions are not intended to be used anywhere other than here,
       * therefore they are set to null once called.
       */
      self.setInventoryTable = function(obj) {
        _InventoryTable = obj;
        self.InventoryTable = null;
      };

      for (property in parameters) {
        if (parameters.hasOwnProperty(property)) {
          variableName = "set" + property;
          value = parameters[property];

          try {
            run();
          } catch (e) {
            CLog.e("Filter.solveCircularDependencies", e);
          }
        }
      }

      function run() {
        self[variableName](value);
      }
    };

    /**
     * @param  {Object} thead jQuery object for table head
     */
    self.init = function(thead) {
      _s.thead = thead;
      initVisuals();
      _listeners.init();
    }
  }

  /** @type {Filter} */
  var _instance = null;

  return {
    getInstance: function(params) {
      if (_instance === null) {
        _instance = new Filter(params);
      }
      return _instance;
    }
  };
})();

DeleteItem = (function() {
  function DeleteItem(params) {

    /* Dependencies */
    var _Constants = NSMain.Constants;
    var _PopupWindow = NSMain.PopupWindow;
    var _BlockUI = NSMain.BlockUI;
    var _Toast = NSMain.Toast;
    var _InventoryTable = params.InventoryTable;
    var _AuditTrail = params.AuditTrail;
    var _s = clone(params.settings); // Do not use direct assignment, as it causes the original object (i.e. NSItems.settings) to change when anything changes in _s.

    var self = this;

    /*
     * Setting the constructor to null to prevent a new object creation by calling
     * the constructor of the instance. This is needed to make the instance strictly
     * a singleton.
     */
    self.constructor = null;

    /* Private Variables */

    _s.Ids = {
      deleteContextMenu: ".delete-context-menu",
      deleteConfirmPopupContentWrapper: "#delete-confirm-popup-window-content-wrapper",
      deleteConfirmPopupButtonWrapper: "#delete-confirm-popup-button-wrapper",
      deleteConfirmButton: "#delete-confirm-button",
      deleteCancelButton: "#delete-cancel-button"
    }
    _s.rowIdPrefix = "cell-line-id-";

    var _currentItemId = "";

    /*-------------------------------------- Private Functions --------------------------------------*/
    /*↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓*/

    var _listeners = {
      cancelDeleteButtonClickListener: function() {
        $("body").on("click", _s.Ids.deleteCancelButton, function(e) {
          _PopupWindow.hide();
        });
      },
      confirmDeleteButtonClickListener: function() {
        $("body").on("click", _s.Ids.deleteConfirmButton, function(e) {
          deleteItem(_currentItemId);
        });
      },
      init: function() {
        this.cancelDeleteButtonClickListener();
        this.confirmDeleteButtonClickListener();
      }
    }

    function showConfirmationPopup() {
      var contentHtml = "<div id='" + _s.Ids.deleteConfirmPopupContentWrapper.slice(1) + "'>";
      contentHtml += "<p>Are you sure you want to delete item " + _currentItemId + "?</p>";
      contentHtml += "<div id='" + _s.Ids.deleteConfirmPopupButtonWrapper.slice(1) + "'>";
      contentHtml += "<a class='button' id='" + _s.Ids.deleteConfirmButton.slice(1) + "'>Yes</a>";
      contentHtml += "<a class='button' id='" + _s.Ids.deleteCancelButton.slice(1) + "'>Cancel</a>";
      contentHtml += "</div>";
      contentHtml += "</div>";

      _PopupWindow.show({
        title: "Are you sure?",
        content: contentHtml,
        height: "20",
        width: "30"
      })
    }

    function deleteItem(itemId, callback) {
      var clientContext = new SP.ClientContext(Constants.siteUrl);
      var oList = clientContext.get_web().get_lists().getByTitle(_Constants.itemsListName);

      var oListItem = oList.getItemById(itemId);

      oListItem.set_item("Deleted", "1");
      oListItem.update();

      _PopupWindow.hide();
      _BlockUI.block();

      clientContext.executeQueryAsync(function() {
        _BlockUI.unblock();
        _Toast.showToast({
          message: "Item deleted",
          duration: _s.toastDuration
        });

        var auditTrailChanges = {};
        auditTrailChanges[itemId] = {
          "old": {
            "Deleted": "No"
          },
          "new": {
            "Deleted": "Yes"
          }
        }
        _AuditTrail.updateAuditTrail(auditTrailChanges);

        // Resetting _currentItemId
        _currentItemId = "";

        _InventoryTable.populateTable();

        if (callback !== undefined) {
          callback();
        }
      }, function(sender, args) {
        _Toast.showToast({
          message: "Error during deleting. Please refresh the page and try again.</br><span>Error message: <i>" + args.get_message() + "</i></span>",
          duration: 0
        });
        CLog.e("DeleteItem.deleteItem", "Request failed. " + args.get_message() + '\n' + args.get_stackTrace());
      });

    }

    self.init = function() {
      $(function() {
        $.contextMenu({
          selector: _s.Ids.deleteContextMenu,
          callback: function(key, options) {
            if (key !== "cancel") {
              _currentItemId = $(this).closest("tr").attr("id").replace(_s.rowIdPrefix, "");
              showConfirmationPopup();
            }
          },
          items: {
            "delete": {
              name: "Delete",
              icon: "delete"
            },
            "sep1": "---------",
            "cancel": {
              name: "Cancel",
              icon: "quit"
            }
          }
        });
      });

      _listeners.init();
    }

  }

  /** @type {DeleteItem} */
  var _instance = null;

  return {
    getInstance: function(params) {
      if (_instance === null) {
        _instance = new DeleteItem(params);
      }
      return _instance;
    }
  };
})();

InventoryTable = (function() {
  function InventoryTable(params) {

    /* Dependencies */
    var _Constants = NSMain.Constants;
    var _BlockUI = NSMain.BlockUI;
    var _Spinner = NSMain.Spinner;
    var _PopupWindow = NSMain.PopupWindow;
    var _MiscFunctions = NSMain.MiscFunctions;
    var _ItemUpdates = params.ItemUpdates;
    var _Search = params.Search;
    var _NewItem = params.NewItem;
    var _AuditTrail = params.AuditTrail;
    var _Filter = params.Filter;
    var _Sort = params.Sort;
    var _DeleteItem = params.DeleteItem;
    var _s = clone(params.settings); // Do not use direct assignment, as it causes the original object (i.e. NSItems.settings) to change when anything changes in _s.

    var self = this;

    /*
     * Setting the constructor to null to prevent a new object creation by calling
     * the constructor of the instance. This is needed to make the instance strictly
     * a singleton.
     */
    self.constructor = null;

    /* Private Variables */

    var _anInputHasFocus = false;

    // These field names has to match the SharePoint list field IDs (not the display names)
    var _fields = _s.fields;

    var _numOfItemsPerQuery = 50;
    var _nextUrl = "";

    _s.Ids = {
      inventoryTable: "#inventory-table",
      theadTextWrapper: ".inventory-table-thead-text-wrapper",
      theadText: ".inventory-table-thead-text",
      deletedItemTd: ".deleted-item-td",
      deletedItemTr: ".deleted-item-tr",
      deleteContextMenu: ".delete-context-menu"
    }
    _s.rowIdPrefix = "cell-line-id-";

    // Used to store inventory table body jQuery object. It is first initialized in 'populateTable' method.
    var _tableBody = "";

    /*-------------------------------------- Private Functions --------------------------------------*/
    /*↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓*/

    var _listeners = {
      inventoryTableInputFocusListener: function() {
        $("body").on("focus", _s.Ids.inventoryTable + " td input", function(e) {
          if ($(this).closest("tr").attr("id") !== _NewItem.rowId()) { // Excluding inputs in new item row
            _ItemUpdates.initialValues($(this));
          }
          _anInputHasFocus = true;
        });
      },
      inventoryTableInputKeyPressListener: function() {
        $("body").on("keyup", _s.Ids.inventoryTable + " td input", function(e) {
          if ($(this).closest("tr").attr("id") !== _NewItem.rowId()) { // Excluding inputs in new item row
            _ItemUpdates.focusedItemAction($(this));

            if (e.keyCode == 13) { // Enter key
              if (_ItemUpdates.itemsChanged()) {
                _ItemUpdates.updateItems();
              } else {
                if (_NewItem.isNewItemRowVisible()) {
                  _NewItem.saveNewItem();
                }
              }
            }
          }
        });
      },
      inventoryTableInputBlurListener: function() {
        $("body").on("blur", _s.Ids.inventoryTable + " td input", function(e) {
          _anInputHasFocus = false;
        });
      },
      inventoryTableIdClickListener: function() {
        $("body").on("click", _s.Ids.inventoryTable + " tbody tr td:first-child", function(e) {
          if ($(this).closest("tr").attr("id") !== _NewItem.rowId()) {
            _AuditTrail.getAuditTrail($(this).closest("tr").attr("id").replace(_s.rowIdPrefix, ""));
          }
        });
      },
      /**
       * @description This method is intended to be used on body keyup events only when no input
       *              has focus in the table (including the add new item inputs)
       */
      bodyKeyPressListener: function() {
        $("body").on("keyup", function(e) {
          if (!_PopupWindow.isVisible()) {
            if (!_anInputHasFocus && e.keyCode == 13) { // Enter key
              if (_ItemUpdates.itemsChanged()) { // There are changes in the table
                _ItemUpdates.updateItems();
              } else if (_NewItem.isNewItemRowVisible()) { // Add new item row is visible and there are no changes in the other items in the table
                _NewItem.saveNewItem();
              }
            }

            if (e.keyCode == 27) { // Esc key
              if (_NewItem.isNewItemRowVisible()) {
                _NewItem.removeNewItemRow();
                if (_ItemUpdates.itemsChanged()) {
                  setTimeout(function() {
                    _ItemUpdates.showUnsavedChangesToast();
                  }, (_Constants.fadeDuration * 2));
                }
              }
            }
          }
        });
      },
      inventoryTableScrollToBottomListener: function() {
        $(_s.Ids.inventoryTable + " tbody").off("scroll");
        $(_s.Ids.inventoryTable + " tbody").scroll(function(e) {
          if ((this.scrollHeight - this.scrollTop) === this.clientHeight) {
            loadMore();
          }
        });
      },
      init: function() {
        this.inventoryTableInputFocusListener();
        this.inventoryTableInputKeyPressListener();
        this.inventoryTableInputBlurListener();
        this.bodyKeyPressListener();
        this.inventoryTableIdClickListener();
        this.inventoryTableScrollToBottomListener();
      }
    }

    /**
     * @description  Prepares and returns table rows (i.e. 'tr') outer HTML with the provided parameters
     * @param  {Array} array    Array containing objects with the provided keys as the field names.
     *                          The value of each field (except 'id') is used to create a cell (i.e. 'td') in row.
     *                          Each object in the array is used to populate a row.
     *                            Example array:
     *                              [
     *                                {ID: 1, Name: "test1", BoxNo: "5", ...},
     *                                {ID: 2, Name: "test2", BoxNo: "4", ...}
     *                              ]
     * @param  {Object} fields  An object containing the field names to grab the values from the array
     *                          provided. Each key in the object is used as the field name; and the values
     *                          for the keys are used to wrap the array values in the provided HTML tag.
     *                            Example fields:
     *                              {id: "ID", Name: "input", BoxNo: "span", ...}
     * @return {String}         HTML string for the rows
     */
    function prepareTableRows(array, keys) {
      var returnHtml = "";

      for (var i = 0, max = array.length; i < max; i++) {
        returnHtml += "<tr id=" + _s.rowIdPrefix + array[i]["Id"];

        var isDeleted = array[i]["Deleted"] == 1;

        if (isDeleted) {
          returnHtml += " class='" + _s.Ids.deletedItemTr.slice(1) + "'";
        }

        returnHtml += ">";

        for (var key in keys) {
          if (!keys.hasOwnProperty(key))
            continue;

          var values = {
            value: array[i][key],
            field: key
          }

          if (key.contains("date") && (_MiscFunctions.date(array[i][key]) === _MiscFunctions.date(_Constants.defaultTime))) {
            array[i][key] = null;
            values.value = array[i][key];
          }

          if (!isDeleted) {
            values.type = keys[key];

            if (key.contains("date")) {
              values.class = "datepicker";
            }

            if (key.toLowerCase() === "id") {
              values.class = _s.Ids.deleteContextMenu.slice(1);
            }
          } else {
            values.title = "(This item was deleted and cannot be edited)";

            if (key.toLowerCase() === "id") {
              values.type = "a";
            } else {
              values.class = _s.Ids.deletedItemTd.slice(1);
            }
          }

          returnHtml += self.prepareTableCell(values);
        }

        returnHtml += "</tr>";
      }

      return returnHtml;
    };

    function prepareTableHead() {
      var numOfFields = _fields.length;
      var theadHtml = "<tr>";

      for (var i = 0; i < numOfFields; i++) {
        theadHtml += "<th field-name='" + _fields[i] + "'>";
        theadHtml += "<span class='" + _s.Ids.theadTextWrapper.slice(1) + "'>";
        theadHtml += "<span class='" + _s.Ids.theadText.slice(1) + "'>" + _fields[i].toSentenceCaseWithSpaces() + "</span>";
        theadHtml += "</span></th>";
      }

      theadHtml += "<th></th>"; // An empty cell at the end is needed for the tbody scrollbar
      theadHtml += "</tr>";

      var tableHead = $(_s.Ids.inventoryTable).find("thead");
      tableHead.html(theadHtml + tableHead.html());

      _Filter.init(tableHead);
      _Sort.init(tableHead);
    }

    function loadMore() {
      if (_nextUrl !== "") {
        _Spinner.show();
        self.getData({
          nextQuery: _nextUrl,
          success: function(data, next) {
            _nextUrl = "";
            if (next !== undefined) {
              _nextUrl = next;
            }
            var fields = {};
            var numOfFields = _fields.length;
            for (var i = 0; i < numOfFields; i++) {
              if (_fields[i] === "ID") {
                fields[_fields[i]] = "a";
              } else {
                fields[_fields[i]] = "input"; // Setting all the fields as inputs, except 'ID'
              }
            }

            _tableBody.html(_tableBody.html() + prepareTableRows(data, fields));
            _listeners.inventoryTableScrollToBottomListener();
            _MiscFunctions.pikaday.init();
          },
          done: function() {
            _Spinner.hide();
          }
        });
      }
    }

    /**
     * @description Builds the query string for API call
     * @param  {String}   [options.searchQuery] If not provided, all the results are shown
     * @param  {String}   [options.sortQuery] If not provided, default sort is 'ID desc'
     * @param  {String}   [options.filterQuery]
     * @param  {String}   [options.paginationQuery]
     * @return {String}   Query string
     */
    function buildQuery(options) {
      options = options !== undefined ? options : {};
      var queryString = "?$select=";

      // Looping through all the fields and adding them to the query
      var numOfFields = _fields.length;
      for (var i = 0; i < numOfFields; i++) {
        queryString += _fields[i] + ",";
      }

      // Adding the 'Deleted' field manually as it is not part of the view, therefore not included in _fields
      queryString += "Deleted"

      var searchQuery = "";
      if (options.searchQuery !== undefined) {
        searchQuery += options.searchQuery;
      } else if (_Search.queryString() !== "") {
        searchQuery += _Search.queryString();
      }

      var filterQuery = "";
      if (options.filterQuery !== undefined) {
        filterQuery += options.filterQuery;
      } else if (_Filter.queryString() !== "") {
        filterQuery += _Filter.queryString();
      }

      if (searchQuery !== "" && filterQuery !== "") {
        queryString += "&$filter=(" + searchQuery + " and " + filterQuery + ")";
      } else if (searchQuery === "" && filterQuery !== "") {
        queryString += "&$filter=(" + filterQuery + ")";
      } else if (searchQuery !== "" && filterQuery === "") {
        queryString += "&$filter=(" + searchQuery + ")";
      }

      if (options.sortQuery !== undefined) {
        queryString += options.sortQuery;
      } else if (_Sort.sortQueryString() !== "") {
        queryString += _Sort.sortQueryString();
      } else {
        queryString += "&$orderby=ID desc"; // Returning the last added item first
      }

      if (options.paginationQuery !== undefined) {
        queryString += options.paginationQuery;
      }

      return queryString;
    }



    /*-------------------------------------- Public Functions ---------------------------------------*/
    /*↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓*/

    /**
     * @description  Prepares and returns a table cell (i.e. 'td') outer HTML with the
     *               provided parameters
     * @param  {String} params.value    Value that will be displayed
     * @param  {String} [params.type]   Type of HTML element that needs to be inserted into the cell.
     *                                  For example: input. span, div, etc.
     * @param  {String} [params.id]     HTML id for the cell
     * @param  {String} [params.class]  HTML class for the cell
     * @param  {String} [params.field]  Field name for td 'field-name' attribute
     * @param  {String} [params.title]  HTML title field
     * @return {String} Outer HTML of the table prepareTableCell
     */
    self.prepareTableCell = function(params) {
      params.type = params.type !== undefined ? params.type : "";
      params.id = params.id !== undefined ? params.id : "";
      params.class = params.class !== undefined ? params.class : "";
      params.field = params.field !== undefined ? params.field : "";
      params.title = params.title !== undefined ? params.title : "";
      params.value = params.value !== null ? params.value : "";
      params.value = _MiscFunctions.escapeHtml(params.value);

      var title = params.value;

      var returnHtml = "<td";

      if (params.field !== "") {
        returnHtml += " field-name=" + params.field;
      }

      if (params.id !== "") {
        returnHtml += " id=" + params.id;
      }

      if (params.class !== "") {
        returnHtml += " class=" + params.class;
      }

      if (params.title !== "") {
        title = params.value + " " + params.title;
      }

      if (params.field.contains("date")) {
        params.value = _MiscFunctions.date(params.value);
      }

      returnHtml += ">";

      if (params.type === "") {
        returnHtml += "<span title='" + title + "'>" + params.value; + "</span>";
      } else if (params.type === "input") {
        returnHtml += "<input value='" + params.value + "' title='" + title + "'/>";
      } else {
        returnHtml += "<" + params.type + " title='" + title + "'>" + params.value + "</" + params.type + ">";
      }

      returnHtml += "</td>";

      return returnHtml;
    };

    /**
     * @description Performs the API query and populates the table with the results
     * @param  {String}   [options.searchQuery] If not provided, all the results are shown
     * @param  {String}   [options.sortQuery]   If not provided, default sort is 'ID desc'
     * @param  {String}   [options.filterQuery]
     * @param  {Function} [options.callback]    Callback function called when AJAX is complete
     * @param  {Boolean}  [options.blockUI]     Default is true
     */
    self.populateTable = function(options) {
      options = options !== undefined ? options : {};
      options.blockUI = options.blockUI !== undefined ? options.blockUI : true;

      var queryString = buildQuery({
        searchQuery: options.searchQuery,
        sortQuery: options.sortQuery,
        filterQuery: options.filterQuery,
        paginationQuery: "&$top=" + _numOfItemsPerQuery
      });

      if (options.blockUI) {
        _BlockUI.block(500);
      }

      self.getData({
        query: queryString,
        success: function(data, next) {
          _nextUrl = "";
          if (next !== undefined) {
            _nextUrl = next;
          }
          var fields = {};
          var numOfFields = _fields.length;
          for (var i = 0; i < numOfFields; i++) {
            if (_fields[i] === "ID") {
              fields[_fields[i]] = "a";
            } else {
              fields[_fields[i]] = "input"; // Setting all the fields as inputs, except 'ID'
            }
          }

          _tableBody = $(_s.Ids.inventoryTable).find("tbody");
          _tableBody.html(prepareTableRows(data, fields));
          _listeners.inventoryTableScrollToBottomListener();
          _MiscFunctions.pikaday.init();
          _Filter.refresh();
        },
        done: function() {
          _BlockUI.unblock();
          if (options.callback !== undefined) {
            options.callback();
          }
        }

      });
    };

    /**
     * @param  {String} [options.query] API query string
     * @param  {String} [options.nextQuery] API __next query URL
     * @param  {Function} [options.success] Callback function to be called after a successful AJAX call
     * @param  {Function} [options.done] Callback function to be called after a AJAX call is done, regardless of the status
     */
    self.getData = function(options) {
      var url = "";
      var apiBaseUrl = "_api/web/lists/getbytitle('" + _Constants.itemsListName + "')/items";
      if (options.query === undefined) {
        options.query = buildQuery();
      }

      if (options.nextQuery !== undefined) {
        url = options.nextQuery
      } else {
        url = _Constants.siteUrl + apiBaseUrl + options.query;
      }

      $.ajax({
        url: url,
        method: "GET",
        headers: {
          "Accept": "application/json; odata=verbose"
        },
        success: function(data) {
          try {
            // CLog.d("InventoryTable.getData returned data", data);
            if (data.d.__next !== undefined) {
              options.success(data.d.results, data.d.__next);
            } else {
              options.success(data.d.results);
            }
          } catch (e) {
            CLog.catch("InventoryTable.getData successCallback", e, true);
          }
        },
        error: function(data) {
          CLog.e("InventoryTable.getData", data);
        }
      }).done(function() {
        try {
          options.done();
        } catch (e) {
          CLog.catch("InventoryTable.getData doneCallback", e);
        }
      });
    }

    /**
     * @description Getter for the inventory table body jQuery object
     * @return {Object} jQuery object for the main inventory table body
     */
    self.body = function() {
      return _tableBody;
    }
    /**
     * @description Getter for the inventory table HTML id
     * @return {Object} HTML id for the main inventory table
     */
    self.id = function() {
      return _s.Ids.inventoryTable;
    }

    /**
     * @description Getter for the inventory table row id prefix
     * @return {String} Inventory table row id prefix
     */
    self.rowIdPrefix = function() {
      return _s.rowIdPrefix;
    }

    /**
     * @description Getter for the inventory table thead text html id
     * @return {String} Inventory table thead text html id
     */
    self.theadTextHtmlClass = function() {
      return _s.Ids.theadText;
    }

    /**
     * @description     Used to handle the circular dependencies by loading the dependencies after
     *                  initial creation of an object.
     *
     *                  A single parameter must be passed as an object literal. For example:
     *
     *                      {Search: Search}
     *
     *                  If Items and Search have circular dependencies with each other,
     *                  "solveCircularDependencies" method should be called as below to solve
     *                  the circular dependency:
     *
     *                      InventoryTable.solveCircularDependencies({
     *                          Search: Search
     *                      });
     *
     *                  this is assuming the Items object was created before Search object. If it
     *                  is the other way around, then the method should be called from Items object:
     *
     *                      Search.solveCircularDependencies({
     *                          InventoryTable: InventoryTable
     *                      });
     *
     *                  If there is more than one circular dependency, each dependent object
     *                  should be added as an item in the object literal parameter:
     *
     *                      InventoryTable.solveCircularDependencies({
     *                          Search: Search,
     *                          NewItem: NewItem
     *                      });
     *
     */
    self.solveCircularDependencies = function() {
      var parameters = arguments[0];

      var variableName, value, property;

      /*
       * Below functions are used to set the local (private) variables, which have circular dependencies,
       * in the parent object. These functions are not intended to be used anywhere other than here,
       * therefore they are set to null once called.
       */
      self.setNewItem = function(obj) {
        _NewItem = obj;
        self.setNewItem = null;
      };

      self.setItemUpdates = function(obj) {
        _ItemUpdates = obj;
        self.setItemUpdates = null;
      };

      self.setDeleteItem = function(obj) {
        _DeleteItem = obj;
        self.setDeleteItem = null;
      };

      for (property in parameters) {
        if (parameters.hasOwnProperty(property)) {
          variableName = "set" + property;
          value = parameters[property];

          try {
            run();
          } catch (e) {
            CLog.e("InventoryTable.solveCircularDependencies", e);
          }
        }
      }

      function run() {
        self[variableName](value);
      }
    };

    self.init = function() {
      prepareTableHead();
      _listeners.init();
      _DeleteItem.init();
    };
  }

  /** @type {InventoryTable} */
  var _instance = null;

  return {
    getInstance: function(params) {
      if (_instance === null) {
        _instance = new InventoryTable(params);
      }
      return _instance;
    }
  };
})();

ItemUpdates = (function() {
  function ItemUpdates(params) {

    /* Dependencies */
    var _Constants = NSMain.Constants;
    var _MiscFunctions = NSMain.MiscFunctions;
    var _Toast = NSMain.Toast;
    var _BlockUI = NSMain.BlockUI;
    var _PopupWindow = NSMain.PopupWindow;
    var _NewItem = params.NewItem;
    var _AuditTrail = params.AuditTrail;
    var _InventoryTable = params.InventoryTable;
    var _s = clone(params.settings); // Do not use direct assignment, as it causes the original object (i.e. NSItems.settings) to change when anything changes in _s.

    var self = this;

    /*
     * Setting the constructor to null to prevent a new object creation by calling
     * the constructor of the instance. This is needed to make the instance strictly
     * a singleton.
     */
    self.constructor = null;

    /* Private Variables */
    _s.Ids = {
      highlighted: ".highlighted"
    }
    _s.elnPopup = {
      Ids: {
        contentWrapper: "#eln-number-request-popup-contents"
      },
      inputPlaceholder: "Please enter the eLN number where you used the cell line",
      title: "Quantity Changed - Please Enter eLN Reference"
    }

    var _focusedItem = {
      currentValue: "",
      hasChanged: false,
      id: "",
      fieldName: ""
    }

    var _initialValues = {};

    var _changedItems = {};
    var _isThereAnyEmptyField = false;
    var _emptyFields = [];

    var _elnReferences = {};
    var _elnReferencesEntered = false;
    var _areThereMissingFieldsInElnPopup = false;


    /*-------------------------------------- Private Functions --------------------------------------*/
    /*↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓*/


    var _listeners = {
      elnReferencePopupSaveButtonClickListener: function() {
        $("body").on("click", _s.elnPopup.Ids.contentWrapper + " .button", function(e) {
          saveElnReferences();
        });
      },
      elnReferencePopupTableInputKeyPressListener: function() {
        $("body").on("keyup", _s.elnPopup.Ids.contentWrapper + " table tr td input", function(e) {
          if (e.keyCode == 13) { // Enter key
            saveElnReferences();
          }
        });
      },
      inventoryTableDatepickerChangeListener: function() {
        $("body").on("change", _InventoryTable.id() + " .datepicker input", function(e) {
          if ($(this).closest("tr").attr("id") !== _NewItem.rowId()) {
            self.focusedItemAction($(this));
          }
        });
      },
      init: function() {
        this.elnReferencePopupSaveButtonClickListener();
        this.elnReferencePopupTableInputKeyPressListener();
        this.inventoryTableDatepickerChangeListener();
      }
      // Inventory table input listeners are in InventoryTable class
    }

    function saveElnReferences() {
      _areThereMissingFieldsInElnPopup = false;
      _elnReferencesEntered = false;
      $(_s.elnPopup.Ids.contentWrapper + " table tr").each(function() {
        var id = $(this).find('td:first-child').html();
        var value = $(this).find('td:last-child input').val();

        if (value == "" || value == _s.elnPopup.inputPlaceholder) {
          _areThereMissingFieldsInElnPopup = true;
          _Toast.showToast({
            message: "Please fill all the fields",
            shake: "true",
            callback: function() {
              self.showUnsavedChangesToast();
            }
          });
        } else {
          _elnReferences[id] = value;
        }
      }).promise().done(function() {
        if (!_areThereMissingFieldsInElnPopup) {
          _elnReferencesEntered = true;
          _PopupWindow.hide();
        }
      });
    }

    function showElnPopup(htmlContent, callback) {
      _PopupWindow.show({
        content: htmlContent,
        title: _s.elnPopup.title,
        width: "50",
        height: "50"
      });

      var interval = setInterval(function() {
        if (_elnReferencesEntered) {
          clearInterval(interval);
          callback();
        }
      }, 200);
    }

    /**
     * @description Gets the focused item's id, field name, and current value and assigns them to
     *              local variables.
     * @param  {Object} item jQuery object for the focused input HTML element
     */
    function saveFocusedItemDetails($item) {
      _focusedItem.id = $item.closest("tr").attr("id").slice(_InventoryTable.rowIdPrefix().length);
      _focusedItem.fieldName = $item.closest("td").attr("field-name");
      _focusedItem.currentValue = $item.val().trim();
    };

    /**
     * @description Cleans up _changedItems object by looping through all the IDs and fields and deleting
     *              fields if the 'new' and 'old' values are same. It also deletes the array for the ID if
     *              it doesn't have any changed values left after clean up.
     */
    function cleanChangedItemsObject() {
      for (var id in _changedItems) {
        if (!_changedItems.hasOwnProperty(id))
          continue;

        // Iterating through all the fields for each item (using their IDs)
        for (var field in _changedItems[id]["new"]) {
          if (!_changedItems[id]["new"].hasOwnProperty(field))
            continue;

          if (_changedItems[id]["new"][field] === _changedItems[id]["old"][field]) {
            // Removing items that hasn't changed
            delete _changedItems[id]["new"][field];
            delete _changedItems[id]["old"][field];
            _highlight.remove(id, field);
          } else {
            _highlight.add(id, field);
            if (field.contains("date")) {
              var datetime = new Date(_changedItems[id]["new"][field]);
              if (datetime === "Invalid Date" || isNaN(datetime)) {
                _changedItems[id]["new"][field] = _Constants.defaultTime;
              } else if (_MiscFunctions.date(_changedItems[id]["new"][field]) === _MiscFunctions.date(_changedItems[id]["old"][field])) {
                // Removing items that hasn't changed
                delete _changedItems[id]["new"][field];
                delete _changedItems[id]["old"][field];
                _highlight.remove(id, field);
              }
            }
          }
        }

        // If no field has changed for the item, it's removed from the object
        if (jQuery.isEmptyObject(_changedItems[id]["new"])) {
          delete _changedItems[id];
        }

        if (jQuery.isEmptyObject(_changedItems)) {
          self.itemsChanged(false);
        } else {
          self.itemsChanged(true);
        }
      }
    }

    var _highlight = {
      add: function(id, fieldName) {
        $("#" + _InventoryTable.rowIdPrefix() + id).find("td[field-name='" + fieldName + "']").find("input").addClass(_s.Ids.highlighted.slice(1));
      },
      remove: function(id, fieldName) {
        $("#" + _InventoryTable.rowIdPrefix() + id).find("td[field-name='" + fieldName + "']").find("input").removeClass(_s.Ids.highlighted.slice(1));
      },
      clearAll: function() {
        $(_InventoryTable.id()).find("input").removeClass(_s.Ids.highlighted.slice(1));
      }
    }

    function showAddNewItemToast() {
      if (_NewItem.isNewItemRowVisible()) {
        var toastDelay = _s.toastDuration + _Constants.fadeDuration * 1.1;
        _NewItem.showAddNewItemToast(toastDelay); // Showing the new item toast if add new item row is visible

        _InventoryTable.body().find("tr:first-child td:first-child input").focus(); // Focusing in new item input if add new item row is visible
      }
    }


    /*-------------------------------------- Public Functions ---------------------------------------*/
    /*↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓*/

    /*--------------------------------------- Getters/Setters ---------------------------------------*/
    /*↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓*/

    /**
     * @description Getter/setter for _focusedItem.hasChanged. If no parameter is provided, it serves
     *              as a getter and returns the current saved value. If the 'value' parameter is provided,
     *              it acts as a setter and assigns the value to _focusedItem.hasChanged.
     * @param {Boolean} [value]
     * @returns {Boolean} Returns true if there are any changes in any of the inputs in the table
     */
    self.itemsChanged = function(value) {
      if (value !== undefined) {
        if (value === false) {
          _highlight.clearAll();
        }
        _focusedItem.hasChanged = value;
      } else {
        return _focusedItem.hasChanged;
      }
    };

    /**
     * @description Getter/setter for _focusedItem.currentValue. If no parameter is provided, it serves
     *              as a getter and returns the current saved value. If the 'value' parameter is provided,
     *              it acts as a setter and assigns the value to _focusedItem.currentValue.
     * @param {String|Number} [value] String or number value of the focused input's current value
     * @returns {String|Number}       If no parameter is provided, saved value is returned
     */
    self.currentValue = function(value) {
      if (value !== undefined) {
        _focusedItem.currentValue = value;
      } else {
        return _focusedItem.currentValue;
      }
    };

    /*↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑*/
    /*--------------------------------------- Getters/Setters ---------------------------------------*/

    /**
     * @param  {Object} item jQuery object for the focused input HTML element
     */
    self.initialValues = function($item) {
      saveFocusedItemDetails($item);
      if (_changedItems[_focusedItem.id] === undefined ||
        _changedItems[_focusedItem.id]["old"] === undefined ||
        _changedItems[_focusedItem.id]["old"][_focusedItem.fieldName] === undefined) {
        _initialValues[_focusedItem.id] = _focusedItem.currentValue;
      }
    }

    self.focusedItemAction = function($item) {
      saveFocusedItemDetails($item);

      if (_changedItems[_focusedItem.id] === undefined) {
        _changedItems[_focusedItem.id] = {};
        _changedItems[_focusedItem.id]["new"] = {};
        _changedItems[_focusedItem.id]["old"] = {};
        _changedItems[_focusedItem.id]["old"][_focusedItem.fieldName] = _initialValues[_focusedItem.id];
      };

      if (_changedItems[_focusedItem.id]["old"][_focusedItem.fieldName] === undefined) {
        _changedItems[_focusedItem.id]["old"][_focusedItem.fieldName] = _initialValues[_focusedItem.id];
      }

      _changedItems[_focusedItem.id]["new"][_focusedItem.fieldName] = _focusedItem.currentValue;

      cleanChangedItemsObject();

      if (self.itemsChanged()) {
        self.showUnsavedChangesToast();
      } else {
        _Toast.hideToast();
        showAddNewItemToast();
      }
    };

    self.showUnsavedChangesToast = function() {
      _Toast.showToast({
        message: "Press 'Enter' to save changes",
        duration: 0
      });
    };

    /**
     * @description Updates all the items in the server via an API query. This function uses the _changedItems object.
     * @param  {Function} callback Callback function
     */
    self.updateItems = function(callback) {
      _isThereAnyEmptyField = false;
      _emptyFields = [];
      var clientContext = new SP.ClientContext(Constants.siteUrl);
      var oList = clientContext.get_web().get_lists().getByTitle(_Constants.itemsListName);

      var quantityChangesPresent = false;
      var eLNPopupHtml = "<div id='" + _s.elnPopup.Ids.contentWrapper.slice(1) + "'>";
      eLNPopupHtml += "<table class='" + _Constants.Ids.scrollableTable.slice(1) + "'>";

      // Table head
      eLNPopupHtml += "<thead>";
      // Header cells with title texts
      eLNPopupHtml += "<tr>";
      eLNPopupHtml += "<th>Item ID</th>";
      eLNPopupHtml += "<th>eLN</th>";
      eLNPopupHtml += "<th></th>"; // Empty cell is needed for scrollbar
      eLNPopupHtml += "</tr>";
      // Header shadow row
      eLNPopupHtml += "<tr class='shadow'><th></th></tr>";
      eLNPopupHtml += "</thead>";

      // Table body
      eLNPopupHtml += "<tbody>";

      // Iterating through all the items that were added to the _changedItems object
      for (var id in _changedItems) {
        if (!_changedItems.hasOwnProperty(id))
          continue;

        var oListItem = oList.getItemById(id);

        // Iterating through all the fields for each item (using their IDs)
        for (var field in _changedItems[id]["new"]) {
          if (!_changedItems[id]["new"].hasOwnProperty(field))
            continue;

          if (_changedItems[id]["new"][field] === _changedItems[id]["old"][field]) {
            // Removing items that hasn't changed
            delete _changedItems[id]["new"][field];
            delete _changedItems[id]["old"][field];
          } else {
            if (field.contains("date")) {
              var datetime = new Date(_changedItems[id]["new"][field]);
              if (datetime === "Invalid Date" || isNaN(datetime)) {
                _changedItems[id]["new"][field] = _Constants.defaultTime;
              }
            }

            if (_changedItems[id]["new"][field] !== "") {
              // Adding all the changed fields to the query
              oListItem.set_item(field, _changedItems[id]["new"][field]);
            } else {
              _isThereAnyEmptyField = true;
              _emptyFields.push([id, field]);
            }
          }
        }
        oListItem.update();

        eLNPopupHtml += "<tr>";
        eLNPopupHtml += "<td>" + id + "</td>";
        eLNPopupHtml += "<td><input type='text' placeholder='" + _s.elnPopup.inputPlaceholder + "'></td>";
        eLNPopupHtml += "</tr>";

        if (_changedItems[id]["new"]["Quantity"] !== undefined) {
          quantityChangesPresent = true;
        }

        // If no field has changed for the item, it's removed from the object
        if (jQuery.isEmptyObject(_changedItems[id]["new"])) {
          delete _changedItems[id];
        }
      }

      eLNPopupHtml += "</tbody>";
      eLNPopupHtml += "</table>";
      eLNPopupHtml += "<a class='button'>Save</a>";
      eLNPopupHtml += "</div>";

      if (!_isThereAnyEmptyField) {
        if (quantityChangesPresent) {
          showElnPopup(eLNPopupHtml, saveChanges);
        } else {
          saveChanges();
        }
      } else {
        var id = _emptyFields[0][0];
        var fieldName = _emptyFields[0][1];
        $("#" + _InventoryTable.rowIdPrefix() + id).find("td[field-name='" + fieldName + "']").find("input").focus();
        _Toast.showToast({
          message: "Please fill all the fields. Values cannot be empty.",
          shake: "true",
          callback: function() {
            self.showUnsavedChangesToast();
          }
        });
      }

      function saveChanges() {
        _BlockUI.block();

        clientContext.executeQueryAsync(function() {
          _BlockUI.unblock();
          _Toast.showToast({
            message: "Changes saved",
            duration: _s.toastDuration
          });

          self.itemsChanged(false);
          _initialValues[_focusedItem.id] = _focusedItem.currentValue;

          // Do not pass objects directly as they are reset in next line
          _AuditTrail.updateAuditTrail(JSON.parse(JSON.stringify(_changedItems)), JSON.parse(JSON.stringify(_elnReferences)));

          // Resetting the holder objects and variables
          _changedItems = {};
          _elnReferences = {};
          quantityChangesPresent = false;
          _elnReferencesEntered = false;

          showAddNewItemToast();

          if (callback !== undefined) {
            callback();
          }
        }, function(sender, args) {
          _Toast.showToast({
            message: "Error during saving. Please refresh the page and try again.</br><span>Error message: <i>" + args.get_message() + "</i></span>",
            duration: 0
          });
          CLog.e("ItemUpdates.updateItem", "Request failed. " + args.get_message() + '\n' + args.get_stackTrace());
        });
      }
    }

    self.init = function() {
      _listeners.init();
    };
  }

  /** @type {ItemUpdates} */
  var _instance = null;

  return {
    getInstance: function(params) {
      if (_instance === null) {
        _instance = new ItemUpdates(params);
      }
      return _instance;
    }
  };
})();

NewItem = (function() {
  function NewItem(params) {

    /* Dependencies */
    var _Constants = NSMain.Constants;
    var _Toast = NSMain.Toast;
    var _BlockUI = NSMain.BlockUI;
    var _MiscFunctions = NSMain.MiscFunctions;
    var _Search = params.Search;
    var _InventoryTable = params.InventoryTable;
    var _AuditTrail = params.AuditTrail;
    var _s = clone(params.settings); // Do not use direct assignment, as it causes the original object (i.e. NSItems.settings) to change when anything changes in _s.

    var self = this;

    /*
     * Setting the constructor to null to prevent a new object creation by calling
     * the constructor of the instance. This is needed to make the instance strictly
     * a singleton.
     */
    self.constructor = null;

    /* Private Variables */
    _s.Ids = {
      addNewItemButton: "#add-new-button",
      addNewItemRow: "#add-new-item-row",
      theadBlockTr: "#thead-block-tr"
    }
    _s.addNewItemRowInputPrefix = "new-item-";
    _s.headerBlockWarningText = "You cannot sort or use filters while adding a new item";

    var _fields = _s.fields;

    var _newItemRowVisible = false;
    var _missingValueFieldId = "";

    var _toastCheckInterval = "";

      var _$thead = "";


    /*-------------------------------------- Private Functions --------------------------------------*/
    /*↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓*/

    var _listeners = {
      addNewItemButtonClickListener: function() {
        $(_s.Ids.addNewItemButton).on("click", function() {
          if (_newItemRowVisible) {
            self.saveNewItem();
          } else {
            $(this).html("Save");
            addNewRow();
          }
        });
      },
      newItemRowKeyPressListener: function() {
        $("body").on("keyup", _s.Ids.addNewItemRow + " td input", function(e) {
          if (e.keyCode == 13) {
            if (_newItemRowVisible) {
              self.saveNewItem();
            }
          }
        });
      },
      init: function() {
        this.addNewItemButtonClickListener();
        this.newItemRowKeyPressListener();
      }
    }

    /**
     * @description Iterates through the new item row inputs and returns an object with values and field names
     * @return {Object} Returns an object with the field names and corresponding values. Example:
     *                    {
     *                      Name: "Item name",
     *                      Notebook: "Notebook number",
     *                      StorageAssetId: "123456",
     *                      RackNo: "4",
     *                      BoxNo: "2",
     *                      Quantity: "50"
     *                    }
     */
    function getNewItemValues() {
      var returnObject = {};

      // Looping through all the fields
      var numOfFields = _fields.length;
      for (var i = 0; i < numOfFields; i++) {
        if (_fields[i].toLowerCase() !== "id") {
          var id = _s.addNewItemRowInputPrefix + _fields[i].toLowerCaseWithDashes();
          returnObject[_fields[i]] = $("#" + id).find("input").val();
        }
      }

      return returnObject;
    }

    function addNewRow() {
      _$thead = $(_InventoryTable.id()).find("thead");
      _$thead.append("<tr id='" + _s.Ids.theadBlockTr.slice(1) + "' data-balloon-pos='up' data-balloon='" + _s.headerBlockWarningText + "'><th></th></tr>");
      checkToast();

      if (!_newItemRowVisible) {
        var emptyRow = "<tr id='" + _s.Ids.addNewItemRow.slice(1) + "'>";

        // Adding the ID row
        emptyRow += _InventoryTable.prepareTableCell({
          value: "",
          type: "",
          id: ""
        });

        // Looping through all the fields
        var numOfFields = _fields.length;
        for (var i = 0; i < numOfFields; i++) {
          if (_fields[i].toLowerCase() !== "id") {
            var id = _s.addNewItemRowInputPrefix + _fields[i].toLowerCaseWithDashes();
            var values = {
              value: "",
              type: "input", // All fields are inputs by default
              id: id
            }

            if (_fields[i].contains("date")) {
              values.class = "datepicker";
            }

            emptyRow += _InventoryTable.prepareTableCell(values);
          }
        }

        emptyRow += "</tr>";

        _InventoryTable.body().html(emptyRow + _InventoryTable.body().html());
        _InventoryTable.body().find("tr:first-child td:nth-child(2) input").focus(); // Focusing in new item input if add new item row is visible
        _MiscFunctions.pikaday.init();

        _newItemRowVisible = true;
      }

      self.showAddNewItemToast();
      _Search.disable("You cannot use search while adding a new item");
    }

    function checkToast() {
      _toastCheckInterval = setInterval(function() {
        if (_newItemRowVisible && !($(_Toast.id()).is(":visible"))) {
          self.showAddNewItemToast();
        } else if (!_newItemRowVisible) {
          clearInterval(_toastCheckInterval);
        }
      }, 4000);
    }

    /*-------------------------------------- Public Functions ---------------------------------------*/
    /*↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓*/

    /*--------------------------------------- Getters/Setters ---------------------------------------*/
    /*↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓*/

    /**
     * @description Getter for _newItemRowVisible
     * @returns {Boolean}
     */
    self.isNewItemRowVisible = function() {
      return _newItemRowVisible;
    };

    /*↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑*/
    /*--------------------------------------- Getters/Setters ---------------------------------------*/

    self.removeNewItemRow = function() {
      $(_s.Ids.addNewItemRow).remove();
      _$thead.find(_s.Ids.theadBlockTr).remove();
      _newItemRowVisible = false;
      _Toast.hideToast();
      _Search.enable();
      $(_s.Ids.addNewItemButton).html("Add New");
    };


    /**
     * @param  {Number} [delay] Delay to show the toast in milliseconds. By default there is no delay.
     */
    self.showAddNewItemToast = function(delay) {
      delay = delay !== undefined ? delay : 0;

      setTimeout(function() {
        _Toast.showToast({
          message: "Press 'Enter' to save new item</br>'Esc' to cancel",
          duration: 0
        });
      }, delay);
    }

    self.saveNewItem = function() {
      var values = getNewItemValues();

      var auditTrail = {};
      auditTrail["old"] = {};
      auditTrail["new"] = {};

      _missingValueFieldId = "";

      for (var value in values) {
        if (!values.hasOwnProperty(value))
          continue;

        if (values[value] === "") {
          if (_missingValueFieldId === "") {
            _missingValueFieldId = _s.addNewItemRowInputPrefix + value.toLowerCaseWithDashes();
          }
        }
      }

      if (_missingValueFieldId !== "") {
        _InventoryTable.body().find("#" + _missingValueFieldId).find("input").focus();
        _Toast.showToast({
          message: "Please fill all the fields",
          shake: "true",
          callback: function() {
            self.showAddNewItemToast();
          }
        });
      } else {
        _BlockUI.block(500);

        var clientContext = new SP.ClientContext(Constants.siteUrl);
        var oList = clientContext.get_web().get_lists().getByTitle(_Constants.itemsListName);

        var itemCreateInfo = new SP.ListItemCreationInformation();
        var oListItem = oList.addItem(itemCreateInfo);

        // Looping through all the fields
        var numOfFields = _fields.length;
        for (var i = 0; i < numOfFields; i++) {
          if (_fields[i].toLowerCase() !== "id") {
            if (_fields[i].contains("date")) {
              var datetime = new Date(values[_fields[i]]);
              if (datetime === "Invalid Date" || isNaN(datetime)) {
                values[_fields[i]] = _Constants.defaultTime;
              }
            }

            // Adding the item details to the audit trail object. This will be stored in audit trail as version 0.
            auditTrail["old"][_fields[i]] = "";
            auditTrail["new"][_fields[i]] = values[_fields[i]];

            oListItem.set_item(_fields[i], values[_fields[i]]);
          }
        }

        oListItem.update();

        clientContext.load(oListItem);

        clientContext.executeQueryAsync(function() {
          _newItemRowVisible = false;
          _Toast.showToast({
            message: "New item saved",
            duration: _s.toastDuration
          });
          _InventoryTable.populateTable();
          _BlockUI.unblock();
          _Search.enable();
          $(_s.Ids.addNewItemButton).html("Add New");
          _$thead.find(_s.Ids.theadBlockTr).remove();

          // Adding the item into the audit trail
          var auditTrailObj = {};
          auditTrailObj[oListItem.get_item("ID")] = auditTrail;
          _AuditTrail.updateAuditTrail(auditTrailObj);

        }, function(sender, args) {
          _BlockUI.unblock();
          _Search.enable();
          CLog.e("NewItem.saveNewItem", "Request failed. " + args.get_message() + '\n' + args.get_stackTrace());
        });
      }
    };

    /**
     * @description Getter for the add new item row id
     * @return {String} Add new item row id
     */
    self.rowId = function() {
      return _s.Ids.addNewItemRow.slice(1);
    }

    self.init = function() {
      _listeners.init();
    };
  }

  /** @type {NewItem} */
  var _instance = null;

  return {
    getInstance: function(params) {
      if (_instance === null) {
        _instance = new NewItem(params);
      }
      return _instance;
    }
  };
})();

Search = (function() {
  function Search(params) {

    /* Dependencies */
    var _Constants = NSMain.Constants;
    var _MiscFunctions = NSMain.MiscFunctions;
    var _NewItem = params.NewItem;
    var _InventoryTable = params.InventoryTable;
    var _s = clone(params.settings); // Do not use direct assignment, as it causes the original object (i.e. NSItems.settings) to change when anything changes in _s.

    var self = this;

    /*
     * Setting the constructor to null to prevent a new object creation by calling
     * the constructor of the instance. This is needed to make the instance strictly
     * a singleton.
     */
    self.constructor = null;

    /* Private Variables */

    _s.Ids = {
      searchInput: "#search-input",
      searchGrayOut: "#search-elements-grayout",
      searchButton: "#search-button",
      searchCancelButton: "#search-cancel-button",
      checkboxHolder: "#search-checkbox-holder",
      createdCheckbox: "#search-created-checkbox",
      modifiedCheckbox: "#search-modified-checkbox"
    }

    var _searchFields = _s.fields;

    var _searchGrayOut = "";
    var _searchInput = "";
    var _searchCancelButton = "";

    var _searchInputKeywords = "";

    // Date search flags in created and modified fields
    var _searchCreatedDate = false;
    var _searchModifiedDate = false;
    var _datePresent = false;

    var _searchQuery = "(Deleted eq 0)";

    var _showDeleted = false;


    /*-------------------------------------- Private Functions --------------------------------------*/
    /*↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓*/

    var _listeners = {
      searchInputKeyPressListener: function() {
        $("body").on("keyup", _s.Ids.searchInput, function(e) {
          if (e.keyCode == 13) { // Enter key
            e.preventDefault ? e.preventDefault() : e.returnValue = false;
            search(_searchInput.val());
            return false;
          }
        });
      },
      searchButtonClickListener: function() {
        $("body").on("click", _s.Ids.searchButton, function() {
          search(_searchInput.val());
        });
      },
      searchCancelClickListener: function() {
        $("body").on("click", _s.Ids.searchCancelButton, function() {
          if (_showDeleted) {
            _searchQuery = "((Deleted eq 1) or (Deleted eq 0))";
          } else {
            _searchQuery = "(Deleted eq 0)";
          }
          _InventoryTable.populateTable({
            callback: function() {
              _searchInput.val("");
              hideCheckboxes();
              _searchCancelButton.fadeOut(200);
            }
          });
        });
      },
      searchInputBlurListener: function() {
        $("body").on("blur", _s.Ids.searchInput, function(e) {
          if ((_searchQuery !== "" || _searchQuery !== "(Deleted eq 0)") && _searchInput.val() == "") {
            setInputValue(_searchInputKeywords);
          }
        });
      },
      searchCheckboxListener: function() {
        $(document).on("change", _s.Ids.createdCheckbox, function(e) {
          if ($(_s.Ids.checkboxHolder).is(":visible")) {
            if ($(this).is(':checked')) {
              _searchCreatedDate = true;
            } else {
              _searchCreatedDate = false;
            }
            search(_searchInput.val());
          }
        });
        $(document).on("change", _s.Ids.modifiedCheckbox, function(e) {
          if ($(_s.Ids.checkboxHolder).is(":visible")) {
            if ($(this).is(':checked')) {
              _searchModifiedDate = true;
            } else {
              _searchModifiedDate = false;
            }
            search(_searchInput.val());
          }
        });
      },
      init: function() {
        this.searchInputKeyPressListener();
        this.searchButtonClickListener();
        this.searchCancelClickListener();
        this.searchInputBlurListener();
        this.searchCheckboxListener();
      }
    }

    function search(keywords) {
      _datePresent = false;
      if (keywords !== undefined && keywords !== "") {

        var queryString = "(";
        if (keywords.toLowerCase() === "deleted" || keywords.toLowerCase() === "\"show deleted\"") {
          queryString += "Deleted eq 1)";

          _InventoryTable.populateTable({
            searchQuery: queryString,
            callback: function() {
              _searchCancelButton.fadeIn(200);
              _searchQuery = queryString;
              _searchInputKeywords = keywords;
            }
          });
        } else {
          /**
           * Below regular expression in match method splits the string into keywords using spaces, but it keeps the keywords wrapped in double quotes together.
           * In other words, it doesn't split the words within double quotes if there are spaces in between them. For example:
           *      var string = 'aaa "23 Mar 2018" 23' is split into this array: ["aaa", ""23 Mar 2018"", "23"]
           * Reference: https://stackoverflow.com/a/16261693/1004334
           */
          var keywordsArray = keywords.match(/(".*?"|[^"\s]+)+(?=\s*|\s*$)/g);

          if (!(keywordsArray.contains("deleted") || keywordsArray.contains("Deleted") || keywordsArray.contains("DELETED") ||
              keywordsArray.contains("\"show deleted\"") || keywordsArray.contains("\"Show Deleted\"") || keywordsArray.contains("\"Show deleted\"") || keywordsArray.contains("\"SHOW DELETED\""))) {
            queryString += "(Deleted eq 0) and ";
          }

          var numOfKeywords = keywordsArray.length;
          var numOfFields = _searchFields.length;

          for (var i = 0; i < numOfKeywords; i++) {
            keywordsArray[i] = keywordsArray[i].replace(/"/g, ""); // Replacing the quotes flanking the keyword (if present)

            if (keywordsArray[i].toLowerCase() === "deleted" || keywordsArray[i].toLowerCase() === "show deleted" || _showDeleted) {
              queryString += "((Deleted eq 1) or (Deleted eq 0)) or ";
            }

            queryString += "(";

            for (var j = 0; j < numOfFields; j++) {
              if (_searchFields[j].contains("date") && _MiscFunctions.isDate(keywordsArray[i])) {
                queryString += self.prepareDateQuery(keywordsArray[i], _searchFields[j]);
                if (_searchCreatedDate) {
                  queryString += self.prepareDateQuery(keywordsArray[i], "Created");
                }
                if (_searchModifiedDate) {
                  queryString += self.prepareDateQuery(keywordsArray[i], "Created");
                }
              } else {
                queryString += "(substringof('" + keywordsArray[i] + "'," + _searchFields[j] + ")) or ";
              }
            }

            queryString = queryString.slice(0, -4); // Removing the extra ' or ' at the end
            queryString += ") and ";
          }

          queryString = queryString.slice(0, -5); // Removing the extra ' and ' at the end
          queryString += ")";
          _searchQuery = queryString;

          _InventoryTable.populateTable({
            searchQuery: queryString,
            callback: function() {
              _searchCancelButton.fadeIn(200);
              _searchQuery = queryString;
              _searchInputKeywords = keywords;

              if (_datePresent) {
                showCheckboxes();
              } else {
                hideCheckboxes();
              }
            }
          });
        }
      } else {
        _InventoryTable.populateTable({
          searchQuery: "",
          callback: function() {
            if (_showDeleted) {
              _searchQuery = "((Deleted eq 1) or (Deleted eq 0))";
            } else {
              _searchQuery = "(Deleted eq 0)";
            }
            _searchInputKeywords = "";
            _searchCancelButton.fadeOut(200);
          }
        });
      }
    }

    function showCheckboxes() {
      $(_s.Ids.checkboxHolder).fadeIn(_Constants.fadeDuration);
    }

    function hideCheckboxes() {
      $(_s.Ids.checkboxHolder).fadeOut(_Constants.fadeDuration)
        .promise().done(function() {
          $(_s.Ids.checkboxHolder).find('input:checkbox').prop('checked', false);
        });
      _searchCreatedDate = false;
      _searchModifiedDate = false;
    }

    function setInputValue(value) {
      _searchInput.val(value);
    }


    /*-------------------------------------- Public Functions ---------------------------------------*/
    /*↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓*/

    /**
     * @param  {String} [message] Message to be shown if user tries to interact with disabled search
     */
    self.disable = function(message) {
      if (message !== undefined) {
        _searchGrayOut.attr("data-balloon", message);
      }
      _searchGrayOut.fadeIn(200);
    }

    self.enable = function() {
      _searchGrayOut.removeAttr("data-balloon");
      _searchGrayOut.fadeOut(200);
    }

    /**
     * @description Getter for search query string
     * @return {String} Search query string
     */
    self.queryString = function() {
      return _searchQuery;
    }

    self.prepareDateQuery = function(dateString, fieldName) {
      var queryString = "";
      var date = new Date(dateString).fixUTCDateOffset();

      // Getting the details of the entered date
      // If only year is entered, month will be 0 (i.e. Jan), and day will be 1
      // If only month and year is entered, day will be 1
      var day = date.getDate().toString();
      var month = date.getMonth().toString();
      var year = date.getFullYear().toString();

      if (!isNaN(day) && !isNaN(month) && !isNaN(year)) {
        var stringGMTDate = day + " " + date.getMonthNameShort() + " " + year + " 00:00:00 GMT-0000";

        date = new Date(stringGMTDate);

        var dateStart = new Date(stringGMTDate).toISOString();

        var dateEnd = date.addDays(365).toISOString();

        if (day != 1) { // A day value was entered in search box by user. E.g. "03 Mar 2018"
          dateEnd = date.addDays(1).toISOString();
        } else if ((month != 0 && day == 1) || (month == 0 && day != 1)) { // Month was entered by user, but not a day. E.g. "Mar 2018"
          dateEnd = date.addDays(_MiscFunctions.daysInMonth(month + 1, year)).toISOString();
        }

        // Reference for SP date filtering: https://sharepoint.stackexchange.com/a/100995/74927
        queryString += "(";
        queryString += "(" + fieldName + " ge datetime'" + dateStart + "') and ";
        queryString += "(" + fieldName + " lt datetime'" + dateEnd + "')";
        queryString += ") or ";

        _datePresent = true;
      }

      return queryString;
    }

    self.showDeleted = function(value) {
      if (value !== undefined) {
        _showDeleted = value;
        if (_showDeleted) {
          _searchQuery = "((Deleted eq 1) or (Deleted eq 0))";
          _searchInputKeywords = "";
          setInputValue("");
          hideCheckboxes();
          _searchCancelButton.fadeOut(200);
        } else {
          _searchQuery = "(Deleted eq 0)";
          _searchInputKeywords = "";
          setInputValue("");
          hideCheckboxes();
          _searchCancelButton.fadeOut(200);
        }
      } else {
        return _showDeleted;
      }
    }

    /**
     * @description     Used to handle the circular dependencies by loading the dependencies after
     *                  initial creation of an object.
     *
     *                  A single parameter must be passed as an object literal. For example:
     *
     *                      {Items: Items}
     *
     *                  If Items and Search have circular dependencies with each other,
     *                  "solveCircularDependencies" method should be called as below to solve
     *                  the circular dependency:
     *
     *                      Search.solveCircularDependencies({
     *                          Items: Items
     *                      });
     *
     *                  this is assuming the Items object was created before Search object. If it
     *                  is the other way around, then the method should be called from Items object:
     *
     *                      Items.solveCircularDependencies({
     *                          Search: Search
     *                      });
     *
     *                  If there is more than one circular dependency, each dependent object
     *                  should be added as an item in the object literal parameter:
     *
     *                      Search.solveCircularDependencies({
     *                          Items: Items,
     *                          Users: Users
     *                      });
     *
     */
    self.solveCircularDependencies = function() {
      var parameters = arguments[0];

      var variableName, value, property;

      /*
       * Below functions are used to set the local (private) variables, which have circular dependencies,
       * in the parent object. These functions are not intended to be used anywhere other than here,
       * therefore they are set to null once called.
       */
      self.setNewItem = function(obj) {
        _NewItem = obj;
        self.setNewItem = null;
      };

      self.setInventoryTable = function(obj) {
        _InventoryTable = obj;
        self.InventoryTable = null;
      };

      for (property in parameters) {
        if (parameters.hasOwnProperty(property)) {
          variableName = "set" + property;
          value = parameters[property];

          try {
            run();
          } catch (e) {
            CLog.e("Search.solveCircularDependencies", e);
          }
        }
      }

      function run() {
        self[variableName](value);
      }
    };

    self.init = function() {
      _listeners.init();
      _searchGrayOut = $(_s.Ids.searchGrayOut);
      _searchInput = $(_s.Ids.searchInput);
      _searchCancelButton = $(_s.Ids.searchCancelButton);
    }
  }

  /** @type {Search} */
  var _instance = null;

  return {
    getInstance: function(params) {
      if (_instance === null) {
        _instance = new Search(params);
      }
      return _instance;
    }
  };
})();

Sort = (function() {
  function Sort(params) {

    /* Dependencies */
    var _Constants = NSMain.Constants;
    var _InventoryTable = params.InventoryTable;
    var _s = clone(params.settings); // Do not use direct assignment, as it causes the original object (i.e. NSItems.settings) to change when anything changes in _s.

    var self = this;

    /*
     * Setting the constructor to null to prevent a new object creation by calling
     * the constructor of the instance. This is needed to make the instance strictly
     * a singleton.
     */
    self.constructor = null;

    /* Private Variables */

    var _fields = _s.fields;

    _s.Ids = {
      sortArrow: ".sort-arrow",
      clearSortButton: "#clear-sort-button"
    }

    // jQuery object for inventory table thead
    _s.thead = {}; // Initialized in init function

    var _sort = {
      field: "",
      order: "asc",
      query: "",
      clear: true
    }

    /*-------------------------------------- Private Functions --------------------------------------*/
    /*↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓*/


    var _listeners = {
      sortClickListener: function() {
        $("body").on("click", _InventoryTable.theadTextHtmlClass() + ", " + _s.Ids.sortArrow, function(e) {
          prepareSortQuery($(this).closest("th").attr("field-name"));
          _InventoryTable.populateTable();
        });
      },
      clearSortingButtonClickListener: function() {
        $("body").on("click", _s.Ids.clearSortButton, function(e) {
          prepareSortQuery("");
          _InventoryTable.populateTable();
        });
      },
      init: function() {
        this.sortClickListener();
        this.clearSortingButtonClickListener();
      }
    }

    /**
     * @description Prepares the sort query and saves it into local _sort object
     * @param  {String} fieldName Field name the sort will be applied to. Empty string can be passes to clear sort.
     */
    function prepareSortQuery(fieldName) {
      _sort.clear = false;
      _clearSortButton.show();

      if (fieldName === "") { // Clear sorting
        fieldName = "ID"; // Default sorting field is ID
        _sort.clear = true;
        _clearSortButton.hide();
        _sort.order = "desc"; // Default sorting is ID desc
      } else {
        if (fieldName !== _sort.field) { // If sort field is changed, sorting order is reset to default (i.e. asc)
          _sort.order = "asc";
        } else {
          // Reversing the order in case the click field is same as before
          _sort.order = _sort.order === "asc" ? "desc" : "asc";
        }
      }

      _sort.field = fieldName;
      _sort.query = "&$orderby=" + fieldName + " " + _sort.order;

      updateVisuals();
    }

    function updateVisuals() {
      // First, hiding all the arrow head
      _s.thead.find(_s.Ids.sortArrow).hide();
      _s.thead.find(_s.Ids.sortArrow).parent().removeClass(_Constants.Ids.underlined.slice(1));

      // Then if the sort query isn't empty (i.e. 'clear' flag is false), showing the appropriate arrow head
      if (!_sort.clear) {
        var arrowHead = _s.thead.find("th[field-name='" + _sort.field + "']").find(_s.Ids.sortArrow);
        arrowHead.parent().addClass(_Constants.Ids.underlined.slice(1));
        if (_sort.order === "asc") {
          arrowHead.html("&#9650;");
        } else {
          arrowHead.html("&#9660;");
        }
        arrowHead.show();
      }
    }

    var _clearSortButton = {
      init: function() {
        _s.thead.closest("table").parent().append("<a id='" + _s.Ids.clearSortButton.slice(1) + "'>Clear Sorting</a>");
      },
      show: function() {
        $(_s.Ids.clearSortButton).show();
      },
      hide: function() {
        $(_s.Ids.clearSortButton).hide();
      }
    }

    /**
     * @description Injects all the required HTML code for sort visuals into DOM.
     */
    function initVisuals() {
      _s.thead.find("tr:first-child").find("th").find(_InventoryTable.theadTextHtmlClass()).parent().each(function() {
        var sortHtml = "<span title='Sort' class='" + _s.Ids.sortArrow.slice(1) + "'>&#9660;</span>";
        $(this).append(sortHtml);
      });
      _clearSortButton.init();
    }

    /*-------------------------------------- Public Functions ---------------------------------------*/
    /*↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓*/


    /**
     * @description Getter for sort and filter query string
     * @return {String} Sort and filter query string
     */
    self.sortQueryString = function() {
      return _sort.query;
    }

    /**
     * @description     Used to handle the circular dependencies by loading the dependencies after
     *                  initial creation of an object.
     *
     *                  A single parameter must be passed as an object literal. For example:
     *
     *                      {InventoryTable: InventoryTable}
     *
     *                  If Items and Search have circular dependencies with each other,
     *                  "solveCircularDependencies" method should be called as below to solve
     *                  the circular dependency:
     *
     *                      Sort.solveCircularDependencies({
     *                          InventoryTable: InventoryTable
     *                      });
     *
     *                  this is assuming the Items object was created before Search object. If it
     *                  is the other way around, then the method should be called from Items object:
     *
     *                      InventoryTable.solveCircularDependencies({
     *                          Sort: Sort
     *                      });
     *
     *                  If there is more than one circular dependency, each dependent object
     *                  should be added as an item in the object literal parameter:
     *
     *                      Sort.solveCircularDependencies({
     *                          Search: Search,
     *                          InventoryTable: InventoryTable
     *                      });
     *
     */
    self.solveCircularDependencies = function() {
      var parameters = arguments[0];

      var variableName, value, property;

      /*
       * Below functions are used to set the local (private) variables, which have circular dependencies,
       * in the parent object. These functions are not intended to be used anywhere other than here,
       * therefore they are set to null once called.
       */
      self.setInventoryTable = function(obj) {
        _InventoryTable = obj;
        self.InventoryTable = null;
      };

      for (property in parameters) {
        if (parameters.hasOwnProperty(property)) {
          variableName = "set" + property;
          value = parameters[property];

          try {
            run();
          } catch (e) {
            CLog.e("Sort.solveCircularDependencies", e);
          }
        }
      }

      function run() {
        self[variableName](value);
      }
    };

    /**
     * @param  {Object} thead jQuery object for table head
     */
    self.init = function(thead) {
      _s.thead = thead;
      initVisuals();
      _listeners.init();
    }
  }

  /** @type {Sort} */
  var _instance = null;

  return {
    getInstance: function(params) {
      if (_instance === null) {
        _instance = new Sort(params);
      }
      return _instance;
    }
  };
})();
console.log("Version:", "2.7.1433");CLog.hideCaught = true; 